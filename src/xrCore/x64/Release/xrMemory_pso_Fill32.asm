; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?xrMemFill32_x86@@YAXPEAXII@Z			; xrMemFill32_x86
PUBLIC	?xrMemFill32_MMX@@YAXPEAXII@Z			; xrMemFill32_MMX
;	COMDAT pdata
pdata	SEGMENT
$pdata$?xrMemFill32_x86@@YAXPEAXII@Z DD imagerel $LN11
	DD	imagerel $LN11+40
	DD	imagerel $unwind$?xrMemFill32_x86@@YAXPEAXII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?xrMemFill32_MMX@@YAXPEAXII@Z DD imagerel $LN11
	DD	imagerel $LN11+40
	DD	imagerel $unwind$?xrMemFill32_MMX@@YAXPEAXII@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?xrMemFill32_MMX@@YAXPEAXII@Z DD 020501H
	DD	027405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?xrMemFill32_x86@@YAXPEAXII@Z DD 020501H
	DD	027405H
xdata	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCore\xrMemory_pso_Fill32.cpp
;	COMDAT ?xrMemFill32_MMX@@YAXPEAXII@Z
_TEXT	SEGMENT
tv73 = 8
dest$ = 8
value$ = 16
count$ = 24
?xrMemFill32_MMX@@YAXPEAXII@Z PROC			; xrMemFill32_MMX, COMDAT

; 13   : {

$LN11:
	mov	QWORD PTR [rsp+16], rdi
	mov	rdi, rcx

; 15   :     u32* end = ptr + count;

	mov	ecx, r8d
	xor	r8d, r8d
	lea	rax, QWORD PTR [rdi+rcx*4]
	cmp	rdi, rax
	cmova	ecx, r8d

; 16   :     for (; ptr != end;) *ptr++ = value;

	test	rcx, rcx
	je	SHORT $LN3@xrMemFill3

; 14   :     u32* ptr = (u32*)dest;

	mov	eax, edx
	rep stosd
$LN3@xrMemFill3:

; 17   : }

	mov	rdi, QWORD PTR [rsp+16]
	ret	0
?xrMemFill32_MMX@@YAXPEAXII@Z ENDP			; xrMemFill32_MMX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCore\xrMemory_pso_Fill32.cpp
;	COMDAT ?xrMemFill32_x86@@YAXPEAXII@Z
_TEXT	SEGMENT
tv73 = 8
dest$ = 8
value$ = 16
count$ = 24
?xrMemFill32_x86@@YAXPEAXII@Z PROC			; xrMemFill32_x86, COMDAT

; 5    : {

$LN11:
	mov	QWORD PTR [rsp+16], rdi
	mov	rdi, rcx

; 7    :     u32* end = ptr + count;

	mov	ecx, r8d
	xor	r8d, r8d
	lea	rax, QWORD PTR [rdi+rcx*4]
	cmp	rdi, rax
	cmova	ecx, r8d

; 8    :     for (; ptr != end;) *ptr++ = value;

	test	rcx, rcx
	je	SHORT $LN3@xrMemFill3

; 6    :     u32* ptr = (u32*)dest;

	mov	eax, edx
	rep stosd
$LN3@xrMemFill3:

; 9    : }

	mov	rdi, QWORD PTR [rsp+16]
	ret	0
?xrMemFill32_x86@@YAXPEAXII@Z ENDP			; xrMemFill32_x86
_TEXT	ENDS
END
