; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?_tri@?$box_collider@$00$00@@QEAA_NXZ		; box_collider<1,1>::_tri
PUBLIC	?_tri@?$box_collider@$00$0A@@@QEAA_NXZ		; box_collider<1,0>::_tri
PUBLIC	?_tri@?$box_collider@$0A@$00@@QEAA_NXZ		; box_collider<0,1>::_tri
PUBLIC	?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ		; box_collider<0,0>::_tri
PUBLIC	?_box@?$box_collider@$00$00@@QEAA_NAEBU?$_vector3@M@@0@Z ; box_collider<1,1>::_box
PUBLIC	?_prim@?$box_collider@$00$00@@QEAAXK@Z		; box_collider<1,1>::_prim
PUBLIC	?_box@?$box_collider@$00$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z ; box_collider<1,0>::_box
PUBLIC	?_prim@?$box_collider@$00$0A@@@QEAAXK@Z		; box_collider<1,0>::_prim
PUBLIC	?_box@?$box_collider@$0A@$00@@QEAA_NAEBU?$_vector3@M@@0@Z ; box_collider<0,1>::_box
PUBLIC	?_prim@?$box_collider@$0A@$00@@QEAAXK@Z		; box_collider<0,1>::_prim
PUBLIC	?_box@?$box_collider@$0A@$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z ; box_collider<0,0>::_box
PUBLIC	?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z	; box_collider<0,0>::_prim
PUBLIC	?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ; box_collider<1,1>::_init
PUBLIC	?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,1>::_stab
PUBLIC	?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ; box_collider<1,0>::_init
PUBLIC	?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,0>::_stab
PUBLIC	?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ; box_collider<0,1>::_init
PUBLIC	?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,1>::_stab
PUBLIC	?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ; box_collider<0,0>::_init
PUBLIC	?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,0>::_stab
PUBLIC	??1?$box_collider@$0A@$0A@@@QEAA@XZ		; box_collider<0,0>::~box_collider<0,0>
PUBLIC	??0?$box_collider@$0A@$0A@@@QEAA@XZ		; box_collider<0,0>::box_collider<0,0>
PUBLIC	??1?$box_collider@$0A@$00@@QEAA@XZ		; box_collider<0,1>::~box_collider<0,1>
PUBLIC	??0?$box_collider@$0A@$00@@QEAA@XZ		; box_collider<0,1>::box_collider<0,1>
PUBLIC	??1?$box_collider@$00$0A@@@QEAA@XZ		; box_collider<1,0>::~box_collider<1,0>
PUBLIC	??0?$box_collider@$00$0A@@@QEAA@XZ		; box_collider<1,0>::box_collider<1,0>
PUBLIC	??1?$box_collider@$00$00@@QEAA@XZ		; box_collider<1,1>::~box_collider<1,1>
PUBLIC	??0?$box_collider@$00$00@@QEAA@XZ		; box_collider<1,1>::box_collider<1,1>
PUBLIC	?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z ; CDB::COLLIDER::box_query
PUBLIC	?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z ; planeBoxOverlap
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN148
	DD	imagerel $LN148+370
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN148+370
	DD	imagerel $LN148+2184
	DD	imagerel $chain$0$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN148+2184
	DD	imagerel $LN148+2244
	DD	imagerel $chain$1$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN148+2244
	DD	imagerel $LN148+2248
	DD	imagerel $chain$2$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD imagerel $LN148+2248
	DD	imagerel $LN148+2252
	DD	imagerel $chain$3$?_tri@?$box_collider@$00$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN148
	DD	imagerel $LN148+370
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN148+370
	DD	imagerel $LN148+2184
	DD	imagerel $chain$0$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN148+2184
	DD	imagerel $LN148+2244
	DD	imagerel $chain$1$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN148+2244
	DD	imagerel $LN148+2248
	DD	imagerel $chain$2$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD imagerel $LN148+2248
	DD	imagerel $LN148+2252
	DD	imagerel $chain$3$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD imagerel $LN147
	DD	imagerel $LN147+727
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD imagerel $LN147
	DD	imagerel $LN147+727
	DD	imagerel $unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN342
	DD	imagerel $LN342+491
	DD	imagerel $unwind$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN342+491
	DD	imagerel $LN342+2111
	DD	imagerel $chain$3$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD imagerel $LN342+2111
	DD	imagerel $LN342+2165
	DD	imagerel $chain$4$?_prim@?$box_collider@$00$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN342
	DD	imagerel $LN342+491
	DD	imagerel $unwind$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN342+491
	DD	imagerel $LN342+2111
	DD	imagerel $chain$3$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD imagerel $LN342+2111
	DD	imagerel $LN342+2165
	DD	imagerel $chain$4$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN339
	DD	imagerel $LN339+490
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN339+490
	DD	imagerel $LN339+898
	DD	imagerel $chain$0$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD imagerel $LN339+898
	DD	imagerel $LN339+961
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN339
	DD	imagerel $LN339+490
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN339+490
	DD	imagerel $LN339+898
	DD	imagerel $chain$0$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD imagerel $LN339+898
	DD	imagerel $LN339+961
	DD	imagerel $chain$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD imagerel $LN13
	DD	imagerel $LN13+197
	DD	imagerel $unwind$?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN696
	DD	imagerel $LN696+267
	DD	imagerel $unwind$?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD imagerel $LN13
	DD	imagerel $LN13+197
	DD	imagerel $unwind$?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN689
	DD	imagerel $LN689+219
	DD	imagerel $unwind$?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD imagerel $LN13
	DD	imagerel $LN13+197
	DD	imagerel $unwind$?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN696
	DD	imagerel $LN696+267
	DD	imagerel $unwind$?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD imagerel $LN13
	DD	imagerel $LN13+197
	DD	imagerel $unwind$?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD imagerel $LN689
	DD	imagerel $LN689+219
	DD	imagerel $unwind$?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD imagerel $LN84
	DD	imagerel $LN84+25
	DD	imagerel $unwind$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD imagerel $LN84+25
	DD	imagerel $LN84+95
	DD	imagerel $chain$3$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD imagerel $LN84+95
	DD	imagerel $LN84+136
	DD	imagerel $chain$4$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD imagerel $LN84+136
	DD	imagerel $LN84+418
	DD	imagerel $chain$11$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD imagerel $LN84+418
	DD	imagerel $LN84+518
	DD	imagerel $chain$12$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD imagerel $LN28
	DD	imagerel $LN28+275
	DD	imagerel $unwind$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z DD 0d6c01H
	DD	01a86cH
	DD	0b83eH
	DD	029835H
	DD	038826H
	DD	047820H
	DD	05681bH
	DD	0c204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD 0c0021H
	DD	09b800H
	DD	0aa800H
	DD	0b9800H
	DD	0c8800H
	DD	0d7800H
	DD	0e6800H
	DD	imagerel $LN84
	DD	imagerel $LN84+25
	DD	imagerel $unwind$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD 0c7a21H
	DD	09b87aH
	DD	0aa86dH
	DD	0b9860H
	DD	0c8854H
	DD	0d7848H
	DD	0e683cH
	DD	imagerel $LN84+25
	DD	imagerel $LN84+95
	DD	imagerel $chain$3$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD 020821H
	DD	0243408H
	DD	imagerel $LN84+25
	DD	imagerel $LN84+95
	DD	imagerel $chain$3$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD 081921H
	DD	01ee419H
	DD	01fd412H
	DD	026c40bH
	DD	0256404H
	DD	imagerel $LN84
	DD	imagerel $LN84+25
	DD	imagerel $unwind$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z DD 051201H
	DD	0200112H
	DD	07005f007H
	DD	05004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 061201H
	DD	026812H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 081701H
	DD	026817H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 061201H
	DD	026812H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z DD 081701H
	DD	026817H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN339
	DD	imagerel $LN339+490
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 020621H
	DD	07c806H
	DD	imagerel $LN339
	DD	imagerel $LN339+490
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z DD 0194901H
	DD	08b849H
	DD	09a841H
	DD	0a983cH
	DD	0b8837H
	DD	0c7832H
	DD	0d682eH
	DD	0247423H
	DD	0236423H
	DD	0223423H
	DD	01c0123H
	DD	0e016f018H
	DD	0c012d014H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN339
	DD	imagerel $LN339+490
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 020621H
	DD	07c806H
	DD	imagerel $LN339
	DD	imagerel $LN339+490
	DD	imagerel $unwind$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$box_collider@$0A@$00@@QEAAXK@Z DD 0194901H
	DD	08b849H
	DD	09a841H
	DD	0a983cH
	DD	0b8837H
	DD	0c7832H
	DD	0d682eH
	DD	0247423H
	DD	0236423H
	DD	0223423H
	DD	01c0123H
	DD	0e016f018H
	DD	0c012d014H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 021H
	DD	imagerel $LN342
	DD	imagerel $LN342+491
	DD	imagerel $unwind$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 082f21H
	DD	09f82fH
	DD	0ae822H
	DD	0bd815H
	DD	0cc808H
	DD	imagerel $LN342
	DD	imagerel $LN342+491
	DD	imagerel $unwind$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$box_collider@$00$0A@@@QEAAXK@Z DD 0164c01H
	DD	0db84cH
	DD	0ea844H
	DD	0f983cH
	DD	0108834H
	DD	011782fH
	DD	012682aH
	DD	027011eH
	DD	0e011f013H
	DD	0c00dd00fH
	DD	0600a700bH
	DD	050083009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 021H
	DD	imagerel $LN342
	DD	imagerel $LN342+491
	DD	imagerel $unwind$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 082f21H
	DD	09f82fH
	DD	0ae822H
	DD	0bd815H
	DD	0cc808H
	DD	imagerel $LN342
	DD	imagerel $LN342+491
	DD	imagerel $unwind$?_prim@?$box_collider@$00$00@@QEAAXK@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_prim@?$box_collider@$00$00@@QEAAXK@Z DD 0164c01H
	DD	0db84cH
	DD	0ea844H
	DD	0f983cH
	DD	0108834H
	DD	011782fH
	DD	012682aH
	DD	027011eH
	DD	0e011f013H
	DD	0c00dd00fH
	DD	0600a700bH
	DD	050083009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ DD 0167201H
	DD	0f872H
	DD	01e86dH
	DD	02d862H
	DD	03c858H
	DD	04b84dH
	DD	05a843H
	DD	069830H
	DD	078825H
	DD	087820H
	DD	096818H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$box_collider@$0A@$00@@QEAA_NXZ DD 0167201H
	DD	0f872H
	DD	01e86dH
	DD	02d862H
	DD	03c858H
	DD	04b84dH
	DD	05a843H
	DD	069830H
	DD	078825H
	DD	087820H
	DD	096818H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN148
	DD	imagerel $LN148+370
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 020021H
	DD	06c800H
	DD	imagerel $LN148
	DD	imagerel $LN148+370
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 021H
	DD	imagerel $LN148
	DD	imagerel $LN148+370
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 020521H
	DD	06c805H
	DD	imagerel $LN148
	DD	imagerel $LN148+370
	DD	imagerel $unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$box_collider@$00$0A@@@QEAA_NXZ DD 0146601H
	DD	03f866H
	DD	04e85dH
	DD	05d84cH
	DD	07b846H
	DD	08a838H
	DD	099833H
	DD	0a882eH
	DD	0b7829H
	DD	0c6821H
	DD	01b010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN148
	DD	imagerel $LN148+370
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 020021H
	DD	06c800H
	DD	imagerel $LN148
	DD	imagerel $LN148+370
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 021H
	DD	imagerel $LN148
	DD	imagerel $LN148+370
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 020521H
	DD	06c805H
	DD	imagerel $LN148
	DD	imagerel $LN148+370
	DD	imagerel $unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tri@?$box_collider@$00$00@@QEAA_NXZ DD 0146601H
	DD	03f866H
	DD	04e85dH
	DD	05d84cH
	DD	07b846H
	DD	08a838H
	DD	099833H
	DD	0a882eH
	DD	0b7829H
	DD	0c6821H
	DD	01b010aH
xdata	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z
_TEXT	SEGMENT
normal$ = 112
d$ = 120
maxbox$ = 128
?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z PROC	; planeBoxOverlap, COMDAT

; 20   : {

$LN28:
	sub	rsp, 104				; 00000068H

; 21   : 	Point vmin, vmax;
; 22   : 	for(udword q=0;q<=2;q++)
; 23   : 	{
; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm2, DWORD PTR [r8]
	xorps	xmm5, xmm5
	movss	xmm3, DWORD PTR [rcx]
	movaps	xmm0, xmm2
	comiss	xmm3, xmm5
	movaps	XMMWORD PTR [rsp+80], xmm6
	movaps	XMMWORD PTR [rsp+64], xmm7
	movaps	XMMWORD PTR [rsp+48], xmm8
	movss	xmm8, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	XMMWORD PTR [rsp+32], xmm9
	xorps	xmm0, xmm8
	movaps	XMMWORD PTR [rsp], xmm11
	movaps	xmm11, xmm1
	jbe	SHORT $LN5@planeBoxOv
	movaps	xmm9, xmm2
	jmp	SHORT $LN2@planeBoxOv
$LN5@planeBoxOv:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm9, xmm0
	movaps	xmm0, xmm2
$LN2@planeBoxOv:

; 21   : 	Point vmin, vmax;
; 22   : 	for(udword q=0;q<=2;q++)
; 23   : 	{
; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm2, DWORD PTR [r8+4]
	movss	xmm6, DWORD PTR [rcx+4]
	movaps	xmm1, xmm2
	comiss	xmm6, xmm5
	xorps	xmm1, xmm8
	movaps	XMMWORD PTR [rsp+16], xmm10
	jbe	SHORT $LN19@planeBoxOv
	movaps	xmm10, xmm2
	jmp	SHORT $LN20@planeBoxOv
$LN19@planeBoxOv:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm10, xmm1
	movaps	xmm1, xmm2
$LN20@planeBoxOv:

; 21   : 	Point vmin, vmax;
; 22   : 	for(udword q=0;q<=2;q++)
; 23   : 	{
; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm2, DWORD PTR [r8+8]
	movss	xmm7, DWORD PTR [rcx+8]
	movaps	xmm4, xmm2
	comiss	xmm7, xmm5
	xorps	xmm4, xmm8
	jbe	SHORT $LN22@planeBoxOv
	movaps	xmm8, xmm2
	jmp	SHORT $LN23@planeBoxOv
$LN22@planeBoxOv:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm8, xmm4
	movaps	xmm4, xmm2
$LN23@planeBoxOv:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movaps	xmm2, xmm3
	mulss	xmm2, xmm0
	movaps	xmm0, xmm6
	mulss	xmm0, xmm1
	movaps	xmm1, xmm7
	mulss	xmm1, xmm4
	addss	xmm2, xmm0
	addss	xmm2, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm2, xmm11
	comiss	xmm2, xmm5
	ja	SHORT $LN8@planeBoxOv
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm3, xmm9
	mulss	xmm6, xmm10
	mulss	xmm7, xmm8
	addss	xmm3, xmm6
	addss	xmm3, xmm7
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm3, xmm11
	comiss	xmm3, xmm5
	jb	SHORT $LN8@planeBoxOv
	mov	al, 1
	jmp	SHORT $LN11@planeBoxOv
$LN8@planeBoxOv:

; 29   : 
; 30   : 	return false;
; 31   : }

	xor	al, al
$LN11@planeBoxOv:
	movaps	xmm10, XMMWORD PTR [rsp+16]
	movaps	xmm6, XMMWORD PTR [rsp+80]
	movaps	xmm7, XMMWORD PTR [rsp+64]
	movaps	xmm8, XMMWORD PTR [rsp+48]
	movaps	xmm9, XMMWORD PTR [rsp+32]
	movaps	xmm11, XMMWORD PTR [rsp]
	add	rsp, 104				; 00000068H
	ret	0
?planeBoxOverlap@@YA_NAEBVicePoint@IceMaths@@M0@Z ENDP	; planeBoxOverlap
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z
_TEXT	SEGMENT
BC$1 = 32
this$ = 288
m_def$ = 296
b_center$ = 304
b_dim$ = 312
?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z PROC ; CDB::COLLIDER::box_query, COMDAT

; 222  : {

$LN84:
	mov	rax, rsp
	push	rbp
	push	rdi
	push	r15
	lea	rbp, QWORD PTR [rax-95]
	sub	rsp, 256				; 00000100H
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB.h

; 86   : 			if (S_READY!=status)

	cmp	DWORD PTR [rdx+16], 0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 222  : {

	mov	rdi, rcx
	mov	QWORD PTR [rax+16], rsi
	mov	rsi, rdx
	mov	QWORD PTR [rax+24], r12
	mov	r12, r9
	mov	QWORD PTR [rax-32], r13
	mov	r13, r8
	mov	QWORD PTR [rax-40], r14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB.h

; 86   : 			if (S_READY!=status)

	je	SHORT $LN10@box_query

; 87   : 			{
; 88   : 				Log						("! WARNING: syncronized CDB::query");
; 89   : 				xrCriticalSection*	C	= (xrCriticalSection*) &cs;
; 90   : 				C->Enter				();

	mov	rcx, rdx
	call	QWORD PTR __imp_?Enter@xrCriticalSection@@QEAAXXZ

; 91   : 				C->Leave				();

	mov	rcx, rsi
	call	QWORD PTR __imp_?Leave@xrCriticalSection@@QEAAXXZ
$LN10@box_query:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 227  : 	const AABBNoLeafNode* N = T->GetNodes();

	mov	rax, QWORD PTR [rsi+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\include\vector

; 1361 :         const pointer _Firstptr = _First._Ptr;

	mov	r14, QWORD PTR [rdi+16]

; 1362 :         const pointer _Lastptr  = _Last._Ptr;

	mov	rdx, QWORD PTR [rdi+24]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 227  : 	const AABBNoLeafNode* N = T->GetNodes();

	mov	rcx, QWORD PTR [rax+8]
	mov	r15, QWORD PTR [rcx+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\include\vector

; 1372 :         if (_Firstptr != _Lastptr) { // something to do, invalidate iterators

	cmp	r14, rdx
	je	SHORT $LN29@box_query
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\include\xutility

; 3753 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	QWORD PTR [rsp+288], rbx

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	rcx, r14
	mov	rbx, rdx
	sub	rbx, rdx
	mov	r8, rbx
	call	memmove

; 3755 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

	lea	rax, QWORD PTR [rbx+r14]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\include\vector

; 1377 :             _Mylast = _Newlast;

	mov	rbx, QWORD PTR [rsp+288]
	mov	QWORD PTR [rdi+24], rax
$LN29@box_query:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 231  : 	if (box_mode&OPT_FULL_TEST) 

	movss	xmm0, DWORD PTR [r13]
	movss	xmm1, DWORD PTR [r13+4]
	movss	xmm2, DWORD PTR [r13+8]
	movss	xmm3, DWORD PTR [r12]
	movss	xmm4, DWORD PTR [r12+4]
	movss	xmm5, DWORD PTR [r12+8]
	mov	rcx, QWORD PTR [rsi+40]
	mov	rdx, QWORD PTR [rsi+24]
	mov	eax, DWORD PTR [rdi+4]
	mov	r8d, eax
	movaps	XMMWORD PTR [rsp+224], xmm6
	and	r8d, 2
	movaps	XMMWORD PTR [rsp+208], xmm7
	movaps	xmm6, xmm0
	movaps	XMMWORD PTR [rsp+192], xmm8
	movaps	xmm7, xmm1
	movaps	XMMWORD PTR [rsp+176], xmm9
	movaps	xmm8, xmm2
	movaps	XMMWORD PTR [rsp+160], xmm10
	movaps	xmm9, xmm3
	movaps	XMMWORD PTR [rsp+144], xmm11
	movaps	xmm11, xmm5
	mov	r14, QWORD PTR [rsp+240]
	movaps	xmm10, xmm4
	mov	r13, QWORD PTR [rsp+248]
	addss	xmm11, xmm2
	mov	r12, QWORD PTR [rsp+304]
	subss	xmm6, xmm3
	mov	rsi, QWORD PTR [rsp+296]
	subss	xmm7, xmm4
	mov	QWORD PTR BC$1[rsp+16], rcx
	subss	xmm8, xmm5
	mov	QWORD PTR BC$1[rsp+8], rdx
	addss	xmm9, xmm0
	movss	DWORD PTR BC$1[rbp-141], xmm11
	addss	xmm10, xmm1
	movss	DWORD PTR BC$1[rbp-137], xmm0
	lea	rcx, QWORD PTR BC$1[rsp]
	movss	DWORD PTR BC$1[rbp-133], xmm1
	mov	rdx, r15
	movss	DWORD PTR BC$1[rbp-129], xmm2
	movss	DWORD PTR BC$1[rbp-125], xmm3
	movss	DWORD PTR BC$1[rbp-121], xmm4
	movss	DWORD PTR BC$1[rbp-117], xmm5
	movss	DWORD PTR BC$1[rsp+24], xmm6
	movss	DWORD PTR BC$1[rbp-157], xmm7
	movss	DWORD PTR BC$1[rbp-153], xmm8
	movss	DWORD PTR BC$1[rbp-149], xmm9
	movss	DWORD PTR BC$1[rbp-145], xmm10
	mov	QWORD PTR BC$1[rsp], rdi
	test	al, 8
	je	SHORT $LN2@box_query

; 232  : 	{
; 233  : 		if (box_mode&OPT_ONLYFIRST)

	test	r8d, r8d
	je	SHORT $LN4@box_query

; 234  : 		{
; 235  : 			box_collider<true,true> BC;
; 236  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);
; 237  : 			BC._stab	(N);

	call	?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,1>::_stab

; 238  : 		} else {

	jmp	SHORT $LN7@box_query
$LN4@box_query:

; 239  : 			box_collider<true,false> BC;
; 240  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);
; 241  : 			BC._stab	(N);

	call	?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,0>::_stab

; 242  : 		}
; 243  : 	} else {

	jmp	SHORT $LN7@box_query
$LN2@box_query:

; 244  : 		if (box_mode&OPT_ONLYFIRST)

	test	r8d, r8d
	je	SHORT $LN6@box_query

; 245  : 		{
; 246  : 			box_collider<false,true> BC;
; 247  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);
; 248  : 			BC._stab	(N);

	call	?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,1>::_stab

; 249  : 		} else {

	jmp	SHORT $LN7@box_query
$LN6@box_query:

; 250  : 			box_collider<false,false> BC;
; 251  : 			BC._init	(this,m_def->verts,m_def->tris,b_center,b_dim);
; 252  : 			BC._stab	(N);

	call	?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,0>::_stab
$LN7@box_query:
	movaps	xmm11, XMMWORD PTR [rsp+144]

; 253  : 		}
; 254  : 	}
; 255  : }

	movaps	xmm10, XMMWORD PTR [rsp+160]
	movaps	xmm9, XMMWORD PTR [rsp+176]
	movaps	xmm8, XMMWORD PTR [rsp+192]
	movaps	xmm7, XMMWORD PTR [rsp+208]
	movaps	xmm6, XMMWORD PTR [rsp+224]
	add	rsp, 256				; 00000100H
	pop	r15
	pop	rdi
	pop	rbp
	ret	0
?box_query@COLLIDER@CDB@@QEAAXPEBVMODEL@2@AEBU?$_vector3@M@@1@Z ENDP ; CDB::COLLIDER::box_query
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$box_collider@$00$00@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$box_collider@$00$00@@QEAA@XZ PROC			; box_collider<1,1>::box_collider<1,1>, COMDAT
	mov	rax, rcx
	ret	0
??0?$box_collider@$00$00@@QEAA@XZ ENDP			; box_collider<1,1>::box_collider<1,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$box_collider@$00$00@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$box_collider@$00$00@@QEAA@XZ PROC			; box_collider<1,1>::~box_collider<1,1>, COMDAT
	ret	0
??1?$box_collider@$00$00@@QEAA@XZ ENDP			; box_collider<1,1>::~box_collider<1,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$box_collider@$00$0A@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$box_collider@$00$0A@@@QEAA@XZ PROC			; box_collider<1,0>::box_collider<1,0>, COMDAT
	mov	rax, rcx
	ret	0
??0?$box_collider@$00$0A@@@QEAA@XZ ENDP			; box_collider<1,0>::box_collider<1,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$box_collider@$00$0A@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$box_collider@$00$0A@@@QEAA@XZ PROC			; box_collider<1,0>::~box_collider<1,0>, COMDAT
	ret	0
??1?$box_collider@$00$0A@@@QEAA@XZ ENDP			; box_collider<1,0>::~box_collider<1,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$box_collider@$0A@$00@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$box_collider@$0A@$00@@QEAA@XZ PROC			; box_collider<0,1>::box_collider<0,1>, COMDAT
	mov	rax, rcx
	ret	0
??0?$box_collider@$0A@$00@@QEAA@XZ ENDP			; box_collider<0,1>::box_collider<0,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$box_collider@$0A@$00@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$box_collider@$0A@$00@@QEAA@XZ PROC			; box_collider<0,1>::~box_collider<0,1>, COMDAT
	ret	0
??1?$box_collider@$0A@$00@@QEAA@XZ ENDP			; box_collider<0,1>::~box_collider<0,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0?$box_collider@$0A@$0A@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$box_collider@$0A@$0A@@@QEAA@XZ PROC		; box_collider<0,0>::box_collider<0,0>, COMDAT
	mov	rax, rcx
	ret	0
??0?$box_collider@$0A@$0A@@@QEAA@XZ ENDP		; box_collider<0,0>::box_collider<0,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$box_collider@$0A@$0A@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$box_collider@$0A@$0A@@@QEAA@XZ PROC		; box_collider<0,0>::~box_collider<0,0>, COMDAT
	ret	0
??1?$box_collider@$0A@$0A@@@QEAA@XZ ENDP		; box_collider<0,0>::~box_collider<0,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
this$ = 64
node$ = 72
?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; box_collider<0,0>::_stab, COMDAT

; 204  : 	{

$LN689:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rdi, rcx
	npad	11
$LL674@stab:

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm4, DWORD PTR [rbx]
	movss	xmm3, DWORD PTR [rbx+12]
	movaps	xmm0, xmm4
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rdi+36]
	ja	$LN7@stab

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm5, DWORD PTR [rbx+4]
	movss	xmm2, DWORD PTR [rbx+16]
	movaps	xmm0, xmm5
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rdi+40]
	ja	SHORT $LN7@stab

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm6, DWORD PTR [rbx+8]
	movss	xmm1, DWORD PTR [rbx+20]
	movaps	xmm0, xmm6
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rdi+44]
	ja	SHORT $LN7@stab

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	movss	xmm0, DWORD PTR [rdi+24]
	addss	xmm3, xmm4
	comiss	xmm0, xmm3
	ja	SHORT $LN7@stab

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	movss	xmm0, DWORD PTR [rdi+28]
	addss	xmm2, xmm5
	comiss	xmm0, xmm2
	ja	SHORT $LN7@stab

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	movss	xmm0, DWORD PTR [rdi+32]
	addss	xmm1, xmm6
	comiss	xmm0, xmm1
	ja	SHORT $LN7@stab

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	dl, 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	je	SHORT $LN3@stab
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	call	?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z ; box_collider<0,0>::_prim
	jmp	SHORT $LN4@stab
$LN3@stab:

; 210  : 		else					_stab	(node->GetPos());

	call	?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,0>::_stab
$LN4@stab:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	BYTE PTR [rbx+32], 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	jne	SHORT $LN678@stab

; 217  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL674@stab
$LN678@stab:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rdx, QWORD PTR [rbx+32]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rcx, rdi
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	call	?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z ; box_collider<0,0>::_prim
$LN7@stab:

; 218  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_stab@?$box_collider@$0A@$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; box_collider<0,0>::_stab
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCore\_vector3d.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
CL$ = 40
V$ = 48
T$ = 56
C$ = 64
E$ = 72
?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z PROC ; box_collider<0,0>::_init, COMDAT

; 96   : 	{

$LN13:
	sub	rsp, 24

; 97   : 		dest		= CL;

	mov	QWORD PTR [rcx], rdx
	mov	r10, rcx
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rdx, QWORD PTR C$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 98   : 		verts		= V;

	mov	QWORD PTR [rcx+16], r8

; 99   : 		tris		= T;

	mov	QWORD PTR [rcx+8], r9
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm2, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	movss	xmm1, DWORD PTR [rdx]
	unpcklps xmm1, xmm2
	movsd	QWORD PTR [rcx+48], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T2[rsp+8], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	mov	eax, DWORD PTR $T2[rsp+8]
	mov	DWORD PTR [rcx+56], eax
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rcx, QWORD PTR E$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	xmm2, DWORD PTR [rcx+4]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	movss	xmm1, DWORD PTR [rcx]
	unpcklps xmm1, xmm2
	movsd	QWORD PTR [r10+60], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T1[rsp+8], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	mov	eax, DWORD PTR $T1[rsp+8]
	mov	DWORD PTR [r10+68], eax
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCore\_vector3d.h

; 37   :     ICF SelfRef sub(const Self& a, const Self& v) { x = a.x - v.x; y = a.y - v.y; z = a.z - v.z; return *this; };

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+24], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+28], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+32], xmm0

; 32   :     ICF SelfRef add(const Self& a, const Self& v) { x = a.x + v.x; y = a.y + v.y; z = a.z + v.z; return *this; };

	movss	xmm1, DWORD PTR [rdx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [r10+36], xmm1
	movss	xmm0, DWORD PTR [rdx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+40], xmm0
	movss	xmm1, DWORD PTR [rdx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+44], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 104  : 	}

	add	rsp, 24
	ret	0
?_init@?$box_collider@$0A@$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ENDP ; box_collider<0,0>::_init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
this$ = 64
node$ = 72
?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; box_collider<0,1>::_stab, COMDAT

; 204  : 	{

$LN696:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rdi, rcx
	mov	rsi, 7905747460161236407		; 6db6db6db6db6db7H
	npad	12
$LL680@stab:

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm4, DWORD PTR [rbx]
	movss	xmm3, DWORD PTR [rbx+12]
	movaps	xmm0, xmm4
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rdi+36]
	ja	$LN7@stab

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm5, DWORD PTR [rbx+4]
	movss	xmm2, DWORD PTR [rbx+16]
	movaps	xmm0, xmm5
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rdi+40]
	ja	$LN7@stab

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm6, DWORD PTR [rbx+8]
	movss	xmm1, DWORD PTR [rbx+20]
	movaps	xmm0, xmm6
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rdi+44]
	ja	SHORT $LN7@stab

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	movss	xmm0, DWORD PTR [rdi+24]
	addss	xmm3, xmm4
	comiss	xmm0, xmm3
	ja	SHORT $LN7@stab

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	movss	xmm0, DWORD PTR [rdi+28]
	addss	xmm2, xmm5
	comiss	xmm0, xmm2
	ja	SHORT $LN7@stab

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	movss	xmm0, DWORD PTR [rdi+32]
	addss	xmm1, xmm6
	comiss	xmm0, xmm1
	ja	SHORT $LN7@stab

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	dl, 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	je	SHORT $LN3@stab
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	call	?_prim@?$box_collider@$0A@$00@@QEAAXK@Z	; box_collider<0,1>::_prim
	jmp	SHORT $LN4@stab
$LN3@stab:

; 210  : 		else					_stab	(node->GetPos());

	call	?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<0,1>::_stab
$LN4@stab:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR [rdi]

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 3
	imul	rcx, rsi
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 213  : 		if (bFirst && dest->r_count())												return;

	test	ecx, ecx
	jne	SHORT $LN7@stab
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	BYTE PTR [rbx+32], 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	jne	SHORT $LN685@stab

; 217  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL680@stab
$LN685@stab:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rdx, QWORD PTR [rbx+32]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rcx, rdi
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	call	?_prim@?$box_collider@$0A@$00@@QEAAXK@Z	; box_collider<0,1>::_prim
$LN7@stab:

; 218  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_stab@?$box_collider@$0A@$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; box_collider<0,1>::_stab
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCore\_vector3d.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
CL$ = 40
V$ = 48
T$ = 56
C$ = 64
E$ = 72
?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z PROC ; box_collider<0,1>::_init, COMDAT

; 96   : 	{

$LN13:
	sub	rsp, 24

; 97   : 		dest		= CL;

	mov	QWORD PTR [rcx], rdx
	mov	r10, rcx
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rdx, QWORD PTR C$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 98   : 		verts		= V;

	mov	QWORD PTR [rcx+16], r8

; 99   : 		tris		= T;

	mov	QWORD PTR [rcx+8], r9
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm2, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	movss	xmm1, DWORD PTR [rdx]
	unpcklps xmm1, xmm2
	movsd	QWORD PTR [rcx+48], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T2[rsp+8], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	mov	eax, DWORD PTR $T2[rsp+8]
	mov	DWORD PTR [rcx+56], eax
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rcx, QWORD PTR E$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	xmm2, DWORD PTR [rcx+4]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	movss	xmm1, DWORD PTR [rcx]
	unpcklps xmm1, xmm2
	movsd	QWORD PTR [r10+60], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T1[rsp+8], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	mov	eax, DWORD PTR $T1[rsp+8]
	mov	DWORD PTR [r10+68], eax
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCore\_vector3d.h

; 37   :     ICF SelfRef sub(const Self& a, const Self& v) { x = a.x - v.x; y = a.y - v.y; z = a.z - v.z; return *this; };

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+24], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+28], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+32], xmm0

; 32   :     ICF SelfRef add(const Self& a, const Self& v) { x = a.x + v.x; y = a.y + v.y; z = a.z + v.z; return *this; };

	movss	xmm1, DWORD PTR [rdx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [r10+36], xmm1
	movss	xmm0, DWORD PTR [rdx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+40], xmm0
	movss	xmm1, DWORD PTR [rdx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+44], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 104  : 	}

	add	rsp, 24
	ret	0
?_init@?$box_collider@$0A@$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ENDP ; box_collider<0,1>::_init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
this$ = 64
node$ = 72
?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; box_collider<1,0>::_stab, COMDAT

; 204  : 	{

$LN689:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rdi, rcx
	npad	11
$LL674@stab:

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm4, DWORD PTR [rbx]
	movss	xmm3, DWORD PTR [rbx+12]
	movaps	xmm0, xmm4
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rdi+36]
	ja	$LN7@stab

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm5, DWORD PTR [rbx+4]
	movss	xmm2, DWORD PTR [rbx+16]
	movaps	xmm0, xmm5
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rdi+40]
	ja	SHORT $LN7@stab

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm6, DWORD PTR [rbx+8]
	movss	xmm1, DWORD PTR [rbx+20]
	movaps	xmm0, xmm6
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rdi+44]
	ja	SHORT $LN7@stab

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	movss	xmm0, DWORD PTR [rdi+24]
	addss	xmm3, xmm4
	comiss	xmm0, xmm3
	ja	SHORT $LN7@stab

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	movss	xmm0, DWORD PTR [rdi+28]
	addss	xmm2, xmm5
	comiss	xmm0, xmm2
	ja	SHORT $LN7@stab

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	movss	xmm0, DWORD PTR [rdi+32]
	addss	xmm1, xmm6
	comiss	xmm0, xmm1
	ja	SHORT $LN7@stab

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	dl, 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	je	SHORT $LN3@stab
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	call	?_prim@?$box_collider@$00$0A@@@QEAAXK@Z	; box_collider<1,0>::_prim
	jmp	SHORT $LN4@stab
$LN3@stab:

; 210  : 		else					_stab	(node->GetPos());

	call	?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,0>::_stab
$LN4@stab:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	BYTE PTR [rbx+32], 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	jne	SHORT $LN678@stab

; 217  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL674@stab
$LN678@stab:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rdx, QWORD PTR [rbx+32]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rcx, rdi
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	call	?_prim@?$box_collider@$00$0A@@@QEAAXK@Z	; box_collider<1,0>::_prim
$LN7@stab:

; 218  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_stab@?$box_collider@$00$0A@@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; box_collider<1,0>::_stab
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCore\_vector3d.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
CL$ = 40
V$ = 48
T$ = 56
C$ = 64
E$ = 72
?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z PROC ; box_collider<1,0>::_init, COMDAT

; 96   : 	{

$LN13:
	sub	rsp, 24

; 97   : 		dest		= CL;

	mov	QWORD PTR [rcx], rdx
	mov	r10, rcx
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rdx, QWORD PTR C$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 98   : 		verts		= V;

	mov	QWORD PTR [rcx+16], r8

; 99   : 		tris		= T;

	mov	QWORD PTR [rcx+8], r9
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm2, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	movss	xmm1, DWORD PTR [rdx]
	unpcklps xmm1, xmm2
	movsd	QWORD PTR [rcx+48], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T2[rsp+8], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	mov	eax, DWORD PTR $T2[rsp+8]
	mov	DWORD PTR [rcx+56], eax
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rcx, QWORD PTR E$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	xmm2, DWORD PTR [rcx+4]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	movss	xmm1, DWORD PTR [rcx]
	unpcklps xmm1, xmm2
	movsd	QWORD PTR [r10+60], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T1[rsp+8], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	mov	eax, DWORD PTR $T1[rsp+8]
	mov	DWORD PTR [r10+68], eax
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCore\_vector3d.h

; 37   :     ICF SelfRef sub(const Self& a, const Self& v) { x = a.x - v.x; y = a.y - v.y; z = a.z - v.z; return *this; };

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+24], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+28], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+32], xmm0

; 32   :     ICF SelfRef add(const Self& a, const Self& v) { x = a.x + v.x; y = a.y + v.y; z = a.z + v.z; return *this; };

	movss	xmm1, DWORD PTR [rdx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [r10+36], xmm1
	movss	xmm0, DWORD PTR [rdx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+40], xmm0
	movss	xmm1, DWORD PTR [rdx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+44], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 104  : 	}

	add	rsp, 24
	ret	0
?_init@?$box_collider@$00$0A@@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ENDP ; box_collider<1,0>::_init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z
_TEXT	SEGMENT
this$ = 64
node$ = 72
?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z PROC ; box_collider<1,1>::_stab, COMDAT

; 204  : 	{

$LN696:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx
	movaps	XMMWORD PTR [rsp+32], xmm6
	mov	rdi, rcx
	mov	rsi, 7905747460161236407		; 6db6db6db6db6db7H
	npad	12
$LL680@stab:

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm4, DWORD PTR [rbx]
	movss	xmm3, DWORD PTR [rbx+12]
	movaps	xmm0, xmm4
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rdi+36]
	ja	$LN7@stab

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm5, DWORD PTR [rbx+4]
	movss	xmm2, DWORD PTR [rbx+16]
	movaps	xmm0, xmm5
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rdi+40]
	ja	$LN7@stab

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm6, DWORD PTR [rbx+8]
	movss	xmm1, DWORD PTR [rbx+20]
	movaps	xmm0, xmm6
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rdi+44]
	ja	SHORT $LN7@stab

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	movss	xmm0, DWORD PTR [rdi+24]
	addss	xmm3, xmm4
	comiss	xmm0, xmm3
	ja	SHORT $LN7@stab

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	movss	xmm0, DWORD PTR [rdi+28]
	addss	xmm2, xmm5
	comiss	xmm0, xmm2
	ja	SHORT $LN7@stab

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	movss	xmm0, DWORD PTR [rdi+32]
	addss	xmm1, xmm6
	comiss	xmm0, xmm1
	ja	SHORT $LN7@stab

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rdi
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	dl, 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	je	SHORT $LN3@stab
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 209  : 		if (node->HasLeaf())	_prim	(node->GetPrimitive());

	call	?_prim@?$box_collider@$00$00@@QEAAXK@Z	; box_collider<1,1>::_prim
	jmp	SHORT $LN4@stab
$LN3@stab:

; 210  : 		else					_stab	(node->GetPos());

	call	?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ; box_collider<1,1>::_stab
$LN4@stab:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.26.28801\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR [rdi]

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rcx, QWORD PTR [rax+24]
	sub	rcx, QWORD PTR [rax+16]
	sar	rcx, 3
	imul	rcx, rsi
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 213  : 		if (bFirst && dest->r_count())												return;

	test	ecx, ecx
	jne	SHORT $LN7@stab
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	test	BYTE PTR [rbx+32], 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	jne	SHORT $LN685@stab

; 217  : 		else					_stab	(node->GetNeg());

	mov	rbx, QWORD PTR [rbx+32]
	jmp	$LL680@stab
$LN685@stab:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	mov	rdx, QWORD PTR [rbx+32]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	mov	rcx, rdi
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_OptimizedTree.h

; 104  : 		IMPLEMENT_NOLEAF_NODE(AABBNoLeafNode, CollisionAABB)

	shr	rdx, 1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 216  : 		if (node->HasLeaf2())	_prim	(node->GetPrimitive2());

	call	?_prim@?$box_collider@$00$00@@QEAAXK@Z	; box_collider<1,1>::_prim
$LN7@stab:

; 218  : 	}

	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?_stab@?$box_collider@$00$00@@QEAAXPEBVAABBNoLeafNode@Opcode@@@Z ENDP ; box_collider<1,1>::_stab
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCore\_vector3d.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
this$ = 32
CL$ = 40
V$ = 48
T$ = 56
C$ = 64
E$ = 72
?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z PROC ; box_collider<1,1>::_init, COMDAT

; 96   : 	{

$LN13:
	sub	rsp, 24

; 97   : 		dest		= CL;

	mov	QWORD PTR [rcx], rdx
	mov	r10, rcx
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rdx, QWORD PTR C$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 98   : 		verts		= V;

	mov	QWORD PTR [rcx+16], r8

; 99   : 		tris		= T;

	mov	QWORD PTR [rcx+8], r9
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm2, DWORD PTR [rdx+4]
	movss	xmm0, DWORD PTR [rdx+8]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	movss	xmm1, DWORD PTR [rdx]
	unpcklps xmm1, xmm2
	movsd	QWORD PTR [rcx+48], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T2[rsp+8], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 100  : 		center		= Point(C.x,C.y,C.z);

	mov	eax, DWORD PTR $T2[rsp+8]
	mov	DWORD PTR [rcx+56], eax
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mov	rcx, QWORD PTR E$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	xmm2, DWORD PTR [rcx+4]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	movss	xmm1, DWORD PTR [rcx]
	unpcklps xmm1, xmm2
	movsd	QWORD PTR [r10+60], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR $T1[rsp+8], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 101  : 		extents		= Point(E.x,E.y,E.z);

	mov	eax, DWORD PTR $T1[rsp+8]
	mov	DWORD PTR [r10+68], eax
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCore\_vector3d.h

; 37   :     ICF SelfRef sub(const Self& a, const Self& v) { x = a.x - v.x; y = a.y - v.y; z = a.z - v.z; return *this; };

	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [r10+24], xmm0
	movss	xmm1, DWORD PTR [rdx+4]
	subss	xmm1, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+28], xmm1
	movss	xmm0, DWORD PTR [rdx+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+32], xmm0

; 32   :     ICF SelfRef add(const Self& a, const Self& v) { x = a.x + v.x; y = a.y + v.y; z = a.z + v.z; return *this; };

	movss	xmm1, DWORD PTR [rdx]
	addss	xmm1, DWORD PTR [rcx]
	movss	DWORD PTR [r10+36], xmm1
	movss	xmm0, DWORD PTR [rdx+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [r10+40], xmm0
	movss	xmm1, DWORD PTR [rdx+8]
	addss	xmm1, DWORD PTR [rcx+8]
	movss	DWORD PTR [r10+44], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 104  : 	}

	add	rsp, 24
	ret	0
?_init@?$box_collider@$00$00@@QEAAXPEAVCOLLIDER@CDB@@PEAU?$_vector3@M@@PEAVTRI@3@AEBU4@3@Z ENDP ; box_collider<1,1>::_init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z
_TEXT	SEGMENT
v0$1 = 32
v1$2 = 48
v2$3 = 64
e1$4 = 80
e0$5 = 96
this$ = 272
prim$ = 280
?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z PROC		; box_collider<0,0>::_prim, COMDAT

; 190  : 	{

$LN339:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	mov	QWORD PTR [rax+24], rdi
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rax-95]
	sub	rsp, 224				; 000000e0H

; 191  : 		TRI&	T	= tris[prim];
; 192  : 		Fvector& v0	= verts[ T.verts[0] ];	mLeafVerts[0].x = v0.x;	mLeafVerts[0].y = v0.y;	mLeafVerts[0].z = v0.z;

	mov	rdi, QWORD PTR [rcx+16]
	mov	rbx, rcx
	movaps	XMMWORD PTR [rax-56], xmm6
	movaps	XMMWORD PTR [rax-72], xmm7
	movaps	XMMWORD PTR [rax-88], xmm8
	movaps	XMMWORD PTR [rax-104], xmm9
	movaps	XMMWORD PTR [rax-120], xmm10
	movaps	XMMWORD PTR [rax-136], xmm11
	mov	esi, edx
	shl	rsi, 4
	add	rsi, QWORD PTR [rcx+8]
	mov	r13d, edx
	mov	eax, DWORD PTR [rsi]
	lea	r14, QWORD PTR [rax+rax*2]
	movss	xmm11, DWORD PTR [rdi+r14*4]
	movss	DWORD PTR [rcx+72], xmm11
	movss	xmm8, DWORD PTR [rdi+r14*4+4]
	movss	DWORD PTR [rcx+76], xmm8
	movss	xmm7, DWORD PTR [rdi+r14*4+8]
	movss	DWORD PTR [rcx+80], xmm7

; 193  : 		Fvector& v1	= verts[ T.verts[1] ];	mLeafVerts[1].x = v1.x;	mLeafVerts[1].y = v1.y;	mLeafVerts[1].z = v1.z;

	mov	eax, DWORD PTR [rsi+4]
	lea	r15, QWORD PTR [rax+rax*2]
	movss	xmm6, DWORD PTR [rdi+r15*4]
	movss	DWORD PTR [rcx+84], xmm6
	movss	xmm4, DWORD PTR [rdi+r15*4+4]
	movss	DWORD PTR [rcx+88], xmm4
	movss	xmm2, DWORD PTR [rdi+r15*4+8]
	movss	DWORD PTR [rcx+92], xmm2

; 194  : 		Fvector& v2	= verts[ T.verts[2] ];	mLeafVerts[2].x = v2.x;	mLeafVerts[2].y = v2.y;	mLeafVerts[2].z = v2.z;

	mov	eax, DWORD PTR [rsi+8]
	lea	r12, QWORD PTR [rax+rax*2]
	movss	xmm9, DWORD PTR [rdi+r12*4]
	movss	DWORD PTR [rcx+96], xmm9
	movss	xmm5, DWORD PTR [rdi+r12*4+4]
	movss	DWORD PTR [rcx+100], xmm5
	movss	xmm3, DWORD PTR [rdi+r12*4+8]
	movss	DWORD PTR [rcx+104], xmm3

; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm10, DWORD PTR [rcx+60]
	subss	xmm6, xmm0
	subss	xmm11, xmm0
	subss	xmm9, xmm0
	movaps	xmm1, xmm6
	movss	DWORD PTR v1$2[rbp-169], xmm6
	minss	xmm1, xmm11
	movss	DWORD PTR v0$1[rsp], xmm11
	movaps	xmm0, xmm9
	movss	DWORD PTR v2$3[rbp-169], xmm9
	minss	xmm0, xmm1
	comiss	xmm0, xmm10
	ja	$LN1@prim

; 120  : 		v1.x = mLeafVerts[1].x - center.x;
; 121  : 		v2.x = mLeafVerts[2].x - center.x;
; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	maxss	xmm6, xmm11
	maxss	xmm9, xmm6

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm6, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm10, xmm6
	comiss	xmm10, xmm9
	ja	$LN1@prim

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;
; 132  : 		v2.y = mLeafVerts[2].y - center.y;
; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);
; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm9, DWORD PTR [rcx+64]
	subss	xmm4, xmm0
	subss	xmm8, xmm0
	subss	xmm5, xmm0
	movaps	xmm1, xmm4
	movss	DWORD PTR v1$2[rbp-165], xmm4
	minss	xmm1, xmm8
	movss	DWORD PTR v0$1[rsp+4], xmm8
	movaps	xmm0, xmm5
	movss	DWORD PTR v2$3[rbp-165], xmm5
	minss	xmm0, xmm1
	comiss	xmm0, xmm9
	ja	$LN1@prim
	maxss	xmm4, xmm8
	xorps	xmm9, xmm6
	maxss	xmm5, xmm4
	comiss	xmm9, xmm5
	ja	$LN1@prim

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;
; 140  : 		v2.z = mLeafVerts[2].z - center.z;
; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);
; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm4, DWORD PTR [rcx+68]
	subss	xmm2, xmm0
	subss	xmm7, xmm0
	subss	xmm3, xmm0
	movaps	xmm1, xmm2
	movss	DWORD PTR v1$2[rbp-161], xmm2
	minss	xmm1, xmm7
	movss	DWORD PTR v0$1[rsp+8], xmm7
	movaps	xmm0, xmm3
	movss	DWORD PTR v2$3[rbp-161], xmm3
	minss	xmm0, xmm1
	comiss	xmm0, xmm4
	ja	$LN1@prim
	maxss	xmm2, xmm7
	xorps	xmm4, xmm6
	maxss	xmm3, xmm2
	comiss	xmm4, xmm3
	ja	$LN1@prim

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;

	lea	r8, QWORD PTR v0$1[rsp]
	movaps	XMMWORD PTR [rsp+112], xmm12
	lea	rdx, QWORD PTR e0$5[rbp-169]
	lea	rcx, QWORD PTR v1$2[rbp-169]
	call	??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ; IceMaths::icePoint::operator-

; 149  : 		const Point e1 = v2 - v1;

	lea	r8, QWORD PTR v1$2[rbp-169]
	lea	rdx, QWORD PTR e1$4[rbp-169]
	lea	rcx, QWORD PTR v2$3[rbp-169]
	call	??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ; IceMaths::icePoint::operator-
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 396  : 									return Point(

	movss	xmm9, DWORD PTR e1$4[rbp-165]
	xorps	xmm8, xmm8
	movss	xmm3, DWORD PTR e1$4[rbp-161]
	movaps	xmm0, xmm9
	mulss	xmm0, DWORD PTR e0$5[rbp-161]
	movaps	xmm12, xmm3
	movss	xmm2, DWORD PTR e1$4[rbp-169]
	mulss	xmm12, DWORD PTR e0$5[rbp-165]
	movaps	xmm10, xmm2
	mulss	xmm10, DWORD PTR e0$5[rbp-161]
	mulss	xmm9, DWORD PTR e0$5[rbp-169]
	subss	xmm12, xmm0
	mulss	xmm3, DWORD PTR e0$5[rbp-169]
	mulss	xmm2, DWORD PTR e0$5[rbp-165]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm12, xmm8
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm0, xmm12

; 396  : 									return Point(

	subss	xmm10, xmm3

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	xorps	xmm0, xmm6

; 396  : 									return Point(

	subss	xmm9, xmm2

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, DWORD PTR v0$1[rsp]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm11, xmm10
	xorps	xmm11, xmm6
	movaps	xmm1, xmm9
	mulss	xmm11, DWORD PTR v0$1[rsp+4]
	xorps	xmm1, xmm6

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, DWORD PTR v0$1[rsp+8]
	addss	xmm11, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm0, DWORD PTR [rbx+60]
	movaps	xmm5, xmm0
	xorps	xmm5, xmm6
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm11, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	jbe	SHORT $LN101@prim
	movaps	xmm7, xmm0
	jmp	SHORT $LN98@prim
$LN101@prim:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm7, xmm5
	movaps	xmm5, xmm0
$LN98@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm10, xmm8
	movss	xmm1, DWORD PTR [rbx+64]
	movaps	xmm0, xmm1
	xorps	xmm0, xmm6
	jbe	SHORT $LN327@prim
	movaps	xmm2, xmm1
	jmp	SHORT $LN328@prim
$LN327@prim:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm2, xmm0
	movaps	xmm0, xmm1
$LN328@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm9, xmm8
	movss	xmm1, DWORD PTR [rbx+68]
	movaps	xmm3, xmm1
	xorps	xmm3, xmm6
	jbe	SHORT $LN330@prim
	movaps	xmm4, xmm1
	jmp	SHORT $LN331@prim
$LN330@prim:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm4, xmm3
	movaps	xmm3, xmm1
$LN331@prim:

; 22   : 	for(udword q=0;q<=2;q++)

	movaps	xmm1, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm5, xmm12
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 22   : 	for(udword q=0;q<=2;q++)

	mulss	xmm1, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movaps	xmm0, xmm9
	mulss	xmm0, xmm3
	addss	xmm1, xmm5
	addss	xmm1, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm1, xmm11
	comiss	xmm1, xmm8
	ja	SHORT $LN336@prim
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm2, xmm10
	mulss	xmm7, xmm12
	mulss	xmm4, xmm9
	addss	xmm2, xmm7
	addss	xmm2, xmm4
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm2, xmm11
	comiss	xmm2, xmm8
	jb	SHORT $LN336@prim

; 195  : 		if (!_tri())			return;
; 196  : 		RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	rdx, rax

; 197  : 		R.id		= prim;

	mov	DWORD PTR [rax+40], r13d

; 198  : 		R.verts[0]	= v0;

	movsd	xmm0, QWORD PTR [rdi+r14*4]
	movsd	QWORD PTR [rax], xmm0
	mov	ecx, DWORD PTR [rdi+r14*4+8]
	mov	DWORD PTR [rax+8], ecx

; 199  : 		R.verts[1]	= v1;

	movsd	xmm0, QWORD PTR [rdi+r15*4]
	movsd	QWORD PTR [rax+12], xmm0
	mov	ecx, DWORD PTR [rdi+r15*4+8]
	mov	DWORD PTR [rax+20], ecx

; 200  : 		R.verts[2]	= v2;

	movsd	xmm0, QWORD PTR [rdi+r12*4]
	movsd	QWORD PTR [rax+24], xmm0
	mov	eax, DWORD PTR [rdi+r12*4+8]
	mov	DWORD PTR [rdx+32], eax

; 201  : 		R.dummy		= T.dummy;

	mov	eax, DWORD PTR [rsi+12]
	mov	DWORD PTR [rdx+36], eax
$LN336@prim:
	movaps	xmm12, XMMWORD PTR [rsp+112]
$LN1@prim:

; 202  : 	}

	lea	r11, QWORD PTR [rsp+224]
	mov	rbx, QWORD PTR [r11+48]
	mov	rsi, QWORD PTR [r11+56]
	mov	rdi, QWORD PTR [r11+64]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
?_prim@?$box_collider@$0A@$0A@@@QEAAXK@Z ENDP		; box_collider<0,0>::_prim
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_box@?$box_collider@$0A@$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z
_TEXT	SEGMENT
this$ = 8
C$ = 16
E$ = 24
?_box@?$box_collider@$0A@$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z PROC ; box_collider<0,0>::_box, COMDAT

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [r8]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rcx+36]
	ja	SHORT $LN9@box

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm2, DWORD PTR [r8+4]
	movaps	xmm0, xmm4
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rcx+40]
	ja	SHORT $LN9@box

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm5, DWORD PTR [rdx+8]
	movss	xmm1, DWORD PTR [r8+8]
	movaps	xmm0, xmm5
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rcx+44]
	ja	SHORT $LN9@box

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, DWORD PTR [rdx]
	movss	xmm0, DWORD PTR [rcx+24]
	comiss	xmm0, xmm3
	ja	SHORT $LN9@box

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	movss	xmm0, DWORD PTR [rcx+28]
	addss	xmm2, xmm4
	comiss	xmm0, xmm2
	ja	SHORT $LN9@box

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	movss	xmm0, DWORD PTR [rcx+32]
	addss	xmm1, xmm5
	comiss	xmm0, xmm1
	ja	SHORT $LN9@box

; 113  : 		return true;

	mov	al, 1

; 114  : 	};

	ret	0
$LN9@box:

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	xor	al, al

; 114  : 	};

	ret	0
?_box@?$box_collider@$0A@$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z ENDP ; box_collider<0,0>::_box
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_prim@?$box_collider@$0A@$00@@QEAAXK@Z
_TEXT	SEGMENT
v0$1 = 32
v1$2 = 48
v2$3 = 64
e1$4 = 80
e0$5 = 96
this$ = 272
prim$ = 280
?_prim@?$box_collider@$0A@$00@@QEAAXK@Z PROC		; box_collider<0,1>::_prim, COMDAT

; 190  : 	{

$LN339:
	mov	rax, rsp
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+16], rsi
	mov	QWORD PTR [rax+24], rdi
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rax-95]
	sub	rsp, 224				; 000000e0H

; 191  : 		TRI&	T	= tris[prim];
; 192  : 		Fvector& v0	= verts[ T.verts[0] ];	mLeafVerts[0].x = v0.x;	mLeafVerts[0].y = v0.y;	mLeafVerts[0].z = v0.z;

	mov	rdi, QWORD PTR [rcx+16]
	mov	rbx, rcx
	movaps	XMMWORD PTR [rax-56], xmm6
	movaps	XMMWORD PTR [rax-72], xmm7
	movaps	XMMWORD PTR [rax-88], xmm8
	movaps	XMMWORD PTR [rax-104], xmm9
	movaps	XMMWORD PTR [rax-120], xmm10
	movaps	XMMWORD PTR [rax-136], xmm11
	mov	esi, edx
	shl	rsi, 4
	add	rsi, QWORD PTR [rcx+8]
	mov	r13d, edx
	mov	eax, DWORD PTR [rsi]
	lea	r14, QWORD PTR [rax+rax*2]
	movss	xmm11, DWORD PTR [rdi+r14*4]
	movss	DWORD PTR [rcx+72], xmm11
	movss	xmm8, DWORD PTR [rdi+r14*4+4]
	movss	DWORD PTR [rcx+76], xmm8
	movss	xmm7, DWORD PTR [rdi+r14*4+8]
	movss	DWORD PTR [rcx+80], xmm7

; 193  : 		Fvector& v1	= verts[ T.verts[1] ];	mLeafVerts[1].x = v1.x;	mLeafVerts[1].y = v1.y;	mLeafVerts[1].z = v1.z;

	mov	eax, DWORD PTR [rsi+4]
	lea	r15, QWORD PTR [rax+rax*2]
	movss	xmm6, DWORD PTR [rdi+r15*4]
	movss	DWORD PTR [rcx+84], xmm6
	movss	xmm4, DWORD PTR [rdi+r15*4+4]
	movss	DWORD PTR [rcx+88], xmm4
	movss	xmm2, DWORD PTR [rdi+r15*4+8]
	movss	DWORD PTR [rcx+92], xmm2

; 194  : 		Fvector& v2	= verts[ T.verts[2] ];	mLeafVerts[2].x = v2.x;	mLeafVerts[2].y = v2.y;	mLeafVerts[2].z = v2.z;

	mov	eax, DWORD PTR [rsi+8]
	lea	r12, QWORD PTR [rax+rax*2]
	movss	xmm9, DWORD PTR [rdi+r12*4]
	movss	DWORD PTR [rcx+96], xmm9
	movss	xmm5, DWORD PTR [rdi+r12*4+4]
	movss	DWORD PTR [rcx+100], xmm5
	movss	xmm3, DWORD PTR [rdi+r12*4+8]
	movss	DWORD PTR [rcx+104], xmm3

; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm10, DWORD PTR [rcx+60]
	subss	xmm6, xmm0
	subss	xmm11, xmm0
	subss	xmm9, xmm0
	movaps	xmm1, xmm6
	movss	DWORD PTR v1$2[rbp-169], xmm6
	minss	xmm1, xmm11
	movss	DWORD PTR v0$1[rsp], xmm11
	movaps	xmm0, xmm9
	movss	DWORD PTR v2$3[rbp-169], xmm9
	minss	xmm0, xmm1
	comiss	xmm0, xmm10
	ja	$LN1@prim

; 120  : 		v1.x = mLeafVerts[1].x - center.x;
; 121  : 		v2.x = mLeafVerts[2].x - center.x;
; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	maxss	xmm6, xmm11
	maxss	xmm9, xmm6

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm6, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm10, xmm6
	comiss	xmm10, xmm9
	ja	$LN1@prim

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;
; 132  : 		v2.y = mLeafVerts[2].y - center.y;
; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);
; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm9, DWORD PTR [rcx+64]
	subss	xmm4, xmm0
	subss	xmm8, xmm0
	subss	xmm5, xmm0
	movaps	xmm1, xmm4
	movss	DWORD PTR v1$2[rbp-165], xmm4
	minss	xmm1, xmm8
	movss	DWORD PTR v0$1[rsp+4], xmm8
	movaps	xmm0, xmm5
	movss	DWORD PTR v2$3[rbp-165], xmm5
	minss	xmm0, xmm1
	comiss	xmm0, xmm9
	ja	$LN1@prim
	maxss	xmm4, xmm8
	xorps	xmm9, xmm6
	maxss	xmm5, xmm4
	comiss	xmm9, xmm5
	ja	$LN1@prim

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;
; 140  : 		v2.z = mLeafVerts[2].z - center.z;
; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);
; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm4, DWORD PTR [rcx+68]
	subss	xmm2, xmm0
	subss	xmm7, xmm0
	subss	xmm3, xmm0
	movaps	xmm1, xmm2
	movss	DWORD PTR v1$2[rbp-161], xmm2
	minss	xmm1, xmm7
	movss	DWORD PTR v0$1[rsp+8], xmm7
	movaps	xmm0, xmm3
	movss	DWORD PTR v2$3[rbp-161], xmm3
	minss	xmm0, xmm1
	comiss	xmm0, xmm4
	ja	$LN1@prim
	maxss	xmm2, xmm7
	xorps	xmm4, xmm6
	maxss	xmm3, xmm2
	comiss	xmm4, xmm3
	ja	$LN1@prim

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;

	lea	r8, QWORD PTR v0$1[rsp]
	movaps	XMMWORD PTR [rsp+112], xmm12
	lea	rdx, QWORD PTR e0$5[rbp-169]
	lea	rcx, QWORD PTR v1$2[rbp-169]
	call	??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ; IceMaths::icePoint::operator-

; 149  : 		const Point e1 = v2 - v1;

	lea	r8, QWORD PTR v1$2[rbp-169]
	lea	rdx, QWORD PTR e1$4[rbp-169]
	lea	rcx, QWORD PTR v2$3[rbp-169]
	call	??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ; IceMaths::icePoint::operator-
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 396  : 									return Point(

	movss	xmm9, DWORD PTR e1$4[rbp-165]
	xorps	xmm8, xmm8
	movss	xmm3, DWORD PTR e1$4[rbp-161]
	movaps	xmm0, xmm9
	mulss	xmm0, DWORD PTR e0$5[rbp-161]
	movaps	xmm12, xmm3
	movss	xmm2, DWORD PTR e1$4[rbp-169]
	mulss	xmm12, DWORD PTR e0$5[rbp-165]
	movaps	xmm10, xmm2
	mulss	xmm10, DWORD PTR e0$5[rbp-161]
	mulss	xmm9, DWORD PTR e0$5[rbp-169]
	subss	xmm12, xmm0
	mulss	xmm3, DWORD PTR e0$5[rbp-169]
	mulss	xmm2, DWORD PTR e0$5[rbp-165]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm12, xmm8
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm0, xmm12

; 396  : 									return Point(

	subss	xmm10, xmm3

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	xorps	xmm0, xmm6

; 396  : 									return Point(

	subss	xmm9, xmm2

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, DWORD PTR v0$1[rsp]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm11, xmm10
	xorps	xmm11, xmm6
	movaps	xmm1, xmm9
	mulss	xmm11, DWORD PTR v0$1[rsp+4]
	xorps	xmm1, xmm6

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, DWORD PTR v0$1[rsp+8]
	addss	xmm11, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm0, DWORD PTR [rbx+60]
	movaps	xmm5, xmm0
	xorps	xmm5, xmm6
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm11, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	jbe	SHORT $LN101@prim
	movaps	xmm7, xmm0
	jmp	SHORT $LN98@prim
$LN101@prim:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm7, xmm5
	movaps	xmm5, xmm0
$LN98@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm10, xmm8
	movss	xmm1, DWORD PTR [rbx+64]
	movaps	xmm0, xmm1
	xorps	xmm0, xmm6
	jbe	SHORT $LN327@prim
	movaps	xmm2, xmm1
	jmp	SHORT $LN328@prim
$LN327@prim:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm2, xmm0
	movaps	xmm0, xmm1
$LN328@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm9, xmm8
	movss	xmm1, DWORD PTR [rbx+68]
	movaps	xmm3, xmm1
	xorps	xmm3, xmm6
	jbe	SHORT $LN330@prim
	movaps	xmm4, xmm1
	jmp	SHORT $LN331@prim
$LN330@prim:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm4, xmm3
	movaps	xmm3, xmm1
$LN331@prim:

; 22   : 	for(udword q=0;q<=2;q++)

	movaps	xmm1, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm5, xmm12
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 22   : 	for(udword q=0;q<=2;q++)

	mulss	xmm1, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movaps	xmm0, xmm9
	mulss	xmm0, xmm3
	addss	xmm1, xmm5
	addss	xmm1, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm1, xmm11
	comiss	xmm1, xmm8
	ja	SHORT $LN336@prim
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm2, xmm10
	mulss	xmm7, xmm12
	mulss	xmm4, xmm9
	addss	xmm2, xmm7
	addss	xmm2, xmm4
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm2, xmm11
	comiss	xmm2, xmm8
	jb	SHORT $LN336@prim

; 195  : 		if (!_tri())			return;
; 196  : 		RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	rdx, rax

; 197  : 		R.id		= prim;

	mov	DWORD PTR [rax+40], r13d

; 198  : 		R.verts[0]	= v0;

	movsd	xmm0, QWORD PTR [rdi+r14*4]
	movsd	QWORD PTR [rax], xmm0
	mov	ecx, DWORD PTR [rdi+r14*4+8]
	mov	DWORD PTR [rax+8], ecx

; 199  : 		R.verts[1]	= v1;

	movsd	xmm0, QWORD PTR [rdi+r15*4]
	movsd	QWORD PTR [rax+12], xmm0
	mov	ecx, DWORD PTR [rdi+r15*4+8]
	mov	DWORD PTR [rax+20], ecx

; 200  : 		R.verts[2]	= v2;

	movsd	xmm0, QWORD PTR [rdi+r12*4]
	movsd	QWORD PTR [rax+24], xmm0
	mov	eax, DWORD PTR [rdi+r12*4+8]
	mov	DWORD PTR [rdx+32], eax

; 201  : 		R.dummy		= T.dummy;

	mov	eax, DWORD PTR [rsi+12]
	mov	DWORD PTR [rdx+36], eax
$LN336@prim:
	movaps	xmm12, XMMWORD PTR [rsp+112]
$LN1@prim:

; 202  : 	}

	lea	r11, QWORD PTR [rsp+224]
	mov	rbx, QWORD PTR [r11+48]
	mov	rsi, QWORD PTR [r11+56]
	mov	rdi, QWORD PTR [r11+64]
	movaps	xmm6, XMMWORD PTR [r11-16]
	movaps	xmm7, XMMWORD PTR [r11-32]
	movaps	xmm8, XMMWORD PTR [r11-48]
	movaps	xmm9, XMMWORD PTR [r11-64]
	movaps	xmm10, XMMWORD PTR [r11-80]
	movaps	xmm11, XMMWORD PTR [r11-96]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
?_prim@?$box_collider@$0A@$00@@QEAAXK@Z ENDP		; box_collider<0,1>::_prim
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_box@?$box_collider@$0A@$00@@QEAA_NAEBU?$_vector3@M@@0@Z
_TEXT	SEGMENT
this$ = 8
C$ = 16
E$ = 24
?_box@?$box_collider@$0A@$00@@QEAA_NAEBU?$_vector3@M@@0@Z PROC ; box_collider<0,1>::_box, COMDAT

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [r8]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rcx+36]
	ja	SHORT $LN9@box

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm2, DWORD PTR [r8+4]
	movaps	xmm0, xmm4
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rcx+40]
	ja	SHORT $LN9@box

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm5, DWORD PTR [rdx+8]
	movss	xmm1, DWORD PTR [r8+8]
	movaps	xmm0, xmm5
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rcx+44]
	ja	SHORT $LN9@box

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, DWORD PTR [rdx]
	movss	xmm0, DWORD PTR [rcx+24]
	comiss	xmm0, xmm3
	ja	SHORT $LN9@box

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	movss	xmm0, DWORD PTR [rcx+28]
	addss	xmm2, xmm4
	comiss	xmm0, xmm2
	ja	SHORT $LN9@box

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	movss	xmm0, DWORD PTR [rcx+32]
	addss	xmm1, xmm5
	comiss	xmm0, xmm1
	ja	SHORT $LN9@box

; 113  : 		return true;

	mov	al, 1

; 114  : 	};

	ret	0
$LN9@box:

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	xor	al, al

; 114  : 	};

	ret	0
?_box@?$box_collider@$0A@$00@@QEAA_NAEBU?$_vector3@M@@0@Z ENDP ; box_collider<0,1>::_box
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_prim@?$box_collider@$00$0A@@@QEAAXK@Z
_TEXT	SEGMENT
d$1$ = 32
v0$1 = 40
v2$2 = 56
v1$3 = 72
e1$4 = 88
e0$5 = 104
e2$6 = 120
$T7 = 384
this$ = 384
prim$ = 392
$T8 = 400
$T9 = 408
?_prim@?$box_collider@$00$0A@@@QEAAXK@Z PROC		; box_collider<1,0>::_prim, COMDAT

; 190  : 	{

$LN342:
	mov	DWORD PTR [rsp+16], edx
	mov	r11, rsp
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [r11-120]
	sub	rsp, 312				; 00000138H

; 191  : 		TRI&	T	= tris[prim];
; 192  : 		Fvector& v0	= verts[ T.verts[0] ];	mLeafVerts[0].x = v0.x;	mLeafVerts[0].y = v0.y;	mLeafVerts[0].z = v0.z;

	mov	rdi, QWORD PTR [rcx+16]
	mov	rbx, rcx
	movaps	XMMWORD PTR [r11-88], xmm6
	movaps	XMMWORD PTR [r11-104], xmm7
	movaps	XMMWORD PTR [r11-120], xmm8
	movaps	XMMWORD PTR [r11-136], xmm9
	movaps	XMMWORD PTR [r11-152], xmm10
	movaps	XMMWORD PTR [r11-168], xmm11
	mov	esi, edx
	shl	rsi, 4
	add	rsi, QWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rsi]
	lea	r14, QWORD PTR [rax+rax*2]
	movss	xmm11, DWORD PTR [rdi+r14*4]
	movss	DWORD PTR [rcx+72], xmm11
	movss	xmm9, DWORD PTR [rdi+r14*4+4]
	movss	DWORD PTR [rcx+76], xmm9
	movss	xmm7, DWORD PTR [rdi+r14*4+8]
	movss	DWORD PTR [rcx+80], xmm7

; 193  : 		Fvector& v1	= verts[ T.verts[1] ];	mLeafVerts[1].x = v1.x;	mLeafVerts[1].y = v1.y;	mLeafVerts[1].z = v1.z;

	mov	eax, DWORD PTR [rsi+4]
	lea	r15, QWORD PTR [rax+rax*2]
	movss	xmm6, DWORD PTR [rdi+r15*4]
	movss	DWORD PTR [rcx+84], xmm6
	movss	xmm4, DWORD PTR [rdi+r15*4+4]
	movss	DWORD PTR [rcx+88], xmm4
	movss	xmm2, DWORD PTR [rdi+r15*4+8]
	movss	DWORD PTR [rcx+92], xmm2

; 194  : 		Fvector& v2	= verts[ T.verts[2] ];	mLeafVerts[2].x = v2.x;	mLeafVerts[2].y = v2.y;	mLeafVerts[2].z = v2.z;

	mov	eax, DWORD PTR [rsi+8]
	lea	r12, QWORD PTR [rax+rax*2]
	movss	xmm8, DWORD PTR [rdi+r12*4]
	movss	DWORD PTR [rcx+96], xmm8
	movss	xmm5, DWORD PTR [rdi+r12*4+4]
	movss	DWORD PTR [rcx+100], xmm5
	movss	xmm3, DWORD PTR [rdi+r12*4+8]
	movss	DWORD PTR [rcx+104], xmm3

; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm10, DWORD PTR [rcx+60]
	subss	xmm6, xmm0
	subss	xmm11, xmm0
	subss	xmm8, xmm0
	movaps	xmm1, xmm6
	movss	DWORD PTR v1$3[rsp], xmm6
	minss	xmm1, xmm11
	movss	DWORD PTR v0$1[rsp], xmm11
	movaps	xmm0, xmm8
	movss	DWORD PTR v2$2[rsp], xmm8
	minss	xmm0, xmm1
	comiss	xmm0, xmm10
	ja	$LN1@prim

; 120  : 		v1.x = mLeafVerts[1].x - center.x;
; 121  : 		v2.x = mLeafVerts[2].x - center.x;
; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	maxss	xmm6, xmm11
	maxss	xmm8, xmm6

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm6, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm10, xmm6
	comiss	xmm10, xmm8
	ja	$LN1@prim

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;
; 132  : 		v2.y = mLeafVerts[2].y - center.y;
; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);
; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm8, DWORD PTR [rcx+64]
	subss	xmm4, xmm0
	subss	xmm9, xmm0
	subss	xmm5, xmm0
	movaps	xmm1, xmm4
	movss	DWORD PTR v1$3[rsp+4], xmm4
	minss	xmm1, xmm9
	movss	DWORD PTR v0$1[rsp+4], xmm9
	movaps	xmm0, xmm5
	movss	DWORD PTR v2$2[rsp+4], xmm5
	minss	xmm0, xmm1
	comiss	xmm0, xmm8
	ja	$LN1@prim
	maxss	xmm4, xmm9
	xorps	xmm8, xmm6
	maxss	xmm5, xmm4
	comiss	xmm8, xmm5
	ja	$LN1@prim

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;
; 140  : 		v2.z = mLeafVerts[2].z - center.z;
; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);
; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm4, DWORD PTR [rcx+68]
	subss	xmm2, xmm0
	subss	xmm7, xmm0
	subss	xmm3, xmm0
	movaps	xmm1, xmm2
	movss	DWORD PTR v1$3[rsp+8], xmm2
	minss	xmm1, xmm7
	movss	DWORD PTR v0$1[rsp+8], xmm7
	movaps	xmm0, xmm3
	movss	DWORD PTR v2$2[rsp+8], xmm3
	minss	xmm0, xmm1
	comiss	xmm0, xmm4
	ja	$LN1@prim
	maxss	xmm2, xmm7
	xorps	xmm4, xmm6
	maxss	xmm3, xmm2
	comiss	xmm4, xmm3
	ja	$LN1@prim

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;

	movaps	XMMWORD PTR [r11-184], xmm12
	lea	r8, QWORD PTR v0$1[rsp]
	movaps	XMMWORD PTR [r11-200], xmm13
	lea	rdx, QWORD PTR e0$5[rsp]
	movaps	XMMWORD PTR [r11-216], xmm14
	lea	rcx, QWORD PTR v1$3[rsp]
	movaps	XMMWORD PTR [r11-232], xmm15
	call	??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ; IceMaths::icePoint::operator-

; 149  : 		const Point e1 = v2 - v1;

	lea	r8, QWORD PTR v1$3[rsp]
	lea	rdx, QWORD PTR e1$4[rsp]
	lea	rcx, QWORD PTR v2$2[rsp]
	call	??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ; IceMaths::icePoint::operator-
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 396  : 									return Point(

	movss	xmm1, DWORD PTR e1$4[rsp+8]
	xorps	xmm10, xmm10
	movss	xmm3, DWORD PTR e1$4[rsp+4]
	movaps	xmm9, xmm1
	movss	xmm8, DWORD PTR e0$5[rsp+4]
	movaps	xmm0, xmm3
	movss	xmm12, DWORD PTR e0$5[rsp+8]
	movaps	xmm7, xmm3
	movss	xmm14, DWORD PTR e1$4[rsp]
	movss	xmm13, DWORD PTR e0$5[rsp]
	movaps	xmm2, xmm14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm15, DWORD PTR [rbx+60]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 396  : 									return Point(

	mulss	xmm0, xmm12
	mulss	xmm9, xmm8
	mulss	xmm2, xmm12
	subss	xmm9, xmm0
	mulss	xmm7, xmm13
	movaps	xmm0, xmm1
	mulss	xmm0, xmm13
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm9, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 396  : 									return Point(

	subss	xmm2, xmm0
	movaps	xmm0, xmm14
	mulss	xmm0, xmm8
	subss	xmm7, xmm0

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm4, xmm2
	xorps	xmm4, xmm6
	movaps	xmm0, xmm9
	mulss	xmm4, DWORD PTR v0$1[rsp+4]
	xorps	xmm0, xmm6

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, DWORD PTR v0$1[rsp]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm1, xmm7
	xorps	xmm1, xmm6

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, DWORD PTR v0$1[rsp+8]
	addss	xmm4, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movaps	xmm0, xmm15
	xorps	xmm0, xmm6
	movss	DWORD PTR $T7[rbp-256], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm4, xmm1
	movss	DWORD PTR d$1$[rsp], xmm4
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	jbe	SHORT $LN101@prim
	movss	DWORD PTR $T9[rbp-256], xmm15
	jmp	SHORT $LN98@prim
$LN101@prim:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movss	DWORD PTR $T9[rbp-256], xmm0
	movss	DWORD PTR $T7[rbp-256], xmm15
$LN98@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm2, xmm10
	movss	xmm0, DWORD PTR [rbx+64]
	movaps	xmm5, xmm0
	xorps	xmm5, xmm6
	jbe	SHORT $LN327@prim
	movss	DWORD PTR $T8[rbp-256], xmm0
	jmp	SHORT $LN328@prim
$LN327@prim:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movss	DWORD PTR $T8[rbp-256], xmm5
	movaps	xmm5, xmm0
$LN328@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm7, xmm10
	movss	xmm0, DWORD PTR [rbx+68]
	movaps	xmm4, xmm0
	xorps	xmm4, xmm6
	jbe	SHORT $LN330@prim
	movaps	xmm11, xmm0
	jmp	SHORT $LN331@prim
$LN330@prim:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm11, xmm4
	movaps	xmm4, xmm0
$LN331@prim:

; 22   : 	for(udword q=0;q<=2;q++)

	movaps	xmm0, xmm2
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm4, xmm7
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 22   : 	for(udword q=0;q<=2;q++)

	mulss	xmm0, xmm5
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movaps	xmm1, xmm9
	mulss	xmm1, DWORD PTR $T7[rbp-256]
	addss	xmm1, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	movss	xmm0, DWORD PTR d$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm1, xmm4
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm1, xmm0
	comiss	xmm1, xmm10
	ja	$LN339@prim
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm2, DWORD PTR $T8[rbp-256]
	mulss	xmm9, DWORD PTR $T9[rbp-256]
	mulss	xmm7, xmm11
	addss	xmm2, xmm9
	addss	xmm2, xmm7
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm2, xmm0
	comiss	xmm2, xmm10
	jb	$LN339@prim
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm10, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm8
	mulss	xmm0, DWORD PTR v0$1[rsp+8]
	movaps	xmm5, xmm12
	mulss	xmm5, DWORD PTR v0$1[rsp+4]
	movaps	xmm7, xmm12
	mulss	xmm7, DWORD PTR v2$2[rsp+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm11, xmm8
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	subss	xmm5, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm9, xmm12
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm8
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm11, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	mulss	xmm0, DWORD PTR v2$2[rsp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm9, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	subss	xmm7, xmm0
	comiss	xmm5, xmm7
	jbe	SHORT $LN25@prim
	movaps	xmm0, xmm7
	movaps	xmm7, xmm5
	movaps	xmm5, xmm0
$LN25@prim:
	movss	xmm1, DWORD PTR [rbx+64]
	movss	xmm2, DWORD PTR [rbx+68]
	movaps	xmm0, xmm1
	movaps	xmm4, xmm2
	mulss	xmm0, xmm9
	mulss	xmm4, xmm11
	addss	xmm4, xmm0
	comiss	xmm5, xmm4
	ja	$LN339@prim
	xorps	xmm4, xmm6
	comiss	xmm4, xmm7
	ja	$LN339@prim

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movaps	xmm0, xmm12
	movaps	xmm4, xmm13
	mulss	xmm4, DWORD PTR v0$1[rsp+8]
	movaps	xmm5, xmm13
	mulss	xmm0, DWORD PTR v0$1[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm7, xmm13
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	mulss	xmm5, DWORD PTR v2$2[rsp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm7, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	mulss	xmm12, DWORD PTR v2$2[rsp]
	subss	xmm4, xmm0
	subss	xmm5, xmm12
	comiss	xmm4, xmm5
	jbe	SHORT $LN28@prim
	movaps	xmm0, xmm5
	movaps	xmm5, xmm4
	movaps	xmm4, xmm0
$LN28@prim:
	movaps	xmm0, xmm2
	mulss	xmm9, xmm15
	mulss	xmm0, xmm7
	addss	xmm0, xmm9
	comiss	xmm4, xmm0
	ja	$LN339@prim
	xorps	xmm0, xmm6
	comiss	xmm0, xmm5
	ja	$LN339@prim

; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);

	movss	xmm12, DWORD PTR v2$2[rsp+4]
	movaps	xmm4, xmm8
	mulss	xmm4, DWORD PTR v1$3[rsp]
	movaps	xmm0, xmm13
	mulss	xmm0, DWORD PTR v1$3[rsp+4]
	mulss	xmm8, DWORD PTR v2$2[rsp]
	mulss	xmm13, xmm12
	subss	xmm4, xmm0
	subss	xmm8, xmm13
	comiss	xmm4, xmm8
	jbe	SHORT $LN31@prim
	movaps	xmm0, xmm8
	movaps	xmm8, xmm4
	movaps	xmm4, xmm0
$LN31@prim:
	movaps	xmm0, xmm1
	mulss	xmm11, xmm15
	mulss	xmm0, xmm7
	addss	xmm0, xmm11
	comiss	xmm4, xmm0
	ja	$LN339@prim
	xorps	xmm0, xmm6
	comiss	xmm0, xmm8
	ja	$LN339@prim
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm11, DWORD PTR e1$4[rsp+8]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm0, xmm3
	movss	xmm13, DWORD PTR v0$1[rsp+8]
	movaps	xmm5, xmm11
	mulss	xmm5, DWORD PTR v0$1[rsp+4]
	movaps	xmm7, xmm11
	mulss	xmm0, xmm13
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm8, xmm3
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm7, xmm12
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm9, xmm11
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movss	xmm12, DWORD PTR v2$2[rsp+8]
	subss	xmm5, xmm0
	movaps	xmm0, xmm3
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm8, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm0, xmm12
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm9, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	subss	xmm7, xmm0
	comiss	xmm5, xmm7
	jbe	SHORT $LN34@prim
	movaps	xmm0, xmm7
	movaps	xmm7, xmm5
	movaps	xmm5, xmm0
$LN34@prim:
	movaps	xmm4, xmm2
	movaps	xmm0, xmm1
	mulss	xmm4, xmm8
	mulss	xmm0, xmm9
	addss	xmm4, xmm0
	comiss	xmm5, xmm4
	ja	$LN339@prim
	xorps	xmm4, xmm6
	comiss	xmm4, xmm7
	ja	$LN339@prim

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movaps	xmm0, xmm11
	movaps	xmm5, xmm14
	mulss	xmm11, DWORD PTR v2$2[rsp]
	movaps	xmm4, xmm14
	mulss	xmm5, xmm13
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm7, xmm14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movss	xmm13, DWORD PTR v0$1[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm7, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	mulss	xmm0, xmm13
	mulss	xmm4, xmm12
	subss	xmm5, xmm0
	subss	xmm4, xmm11
	comiss	xmm5, xmm4
	jbe	SHORT $LN37@prim
	movaps	xmm0, xmm4
	movaps	xmm4, xmm5
	movaps	xmm5, xmm0
$LN37@prim:
	mulss	xmm2, xmm7
	mulss	xmm9, xmm15
	addss	xmm2, xmm9
	comiss	xmm5, xmm2
	ja	$LN339@prim
	xorps	xmm2, xmm6
	comiss	xmm2, xmm4
	ja	$LN339@prim

; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);

	movaps	xmm2, xmm3
	movaps	xmm0, xmm14
	mulss	xmm0, DWORD PTR v0$1[rsp+4]
	mulss	xmm3, DWORD PTR v1$3[rsp]
	mulss	xmm14, DWORD PTR v1$3[rsp+4]
	mulss	xmm2, xmm13
	subss	xmm3, xmm14
	subss	xmm2, xmm0
	comiss	xmm2, xmm3
	jbe	SHORT $LN40@prim
	movaps	xmm0, xmm3
	movaps	xmm3, xmm2
	movaps	xmm2, xmm0
$LN40@prim:
	mulss	xmm1, xmm7
	mulss	xmm8, xmm15
	addss	xmm1, xmm8
	comiss	xmm2, xmm1
	ja	$LN339@prim
	xorps	xmm1, xmm6
	comiss	xmm1, xmm3
	ja	$LN339@prim

; 178  : 			
; 179  : 			const Point e2 = mLeafVerts[0] - mLeafVerts[2];

	lea	r8, QWORD PTR [rbx+96]
	lea	rdx, QWORD PTR e2$6[rsp]
	lea	rcx, QWORD PTR [rbx+72]
	call	??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ; IceMaths::icePoint::operator-
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm1, DWORD PTR e2$6[rsp+4]
	movss	xmm8, DWORD PTR e2$6[rbp-248]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm0, xmm1
	movss	xmm13, DWORD PTR v0$1[rsp+8]
	movaps	xmm7, xmm8
	mulss	xmm7, DWORD PTR v0$1[rsp+4]
	movaps	xmm5, xmm8
	movss	xmm15, DWORD PTR v1$3[rsp+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm12, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movss	xmm14, DWORD PTR v1$3[rsp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm11, xmm8
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	mulss	xmm0, xmm13
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm12, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	mulss	xmm5, xmm15
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm11, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	subss	xmm7, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm14
	subss	xmm5, xmm0
	comiss	xmm7, xmm5
	jbe	SHORT $LN43@prim
	movaps	xmm0, xmm5
	movaps	xmm5, xmm7
	movaps	xmm7, xmm0
$LN43@prim:
	movss	xmm2, DWORD PTR [rbx+64]
	movss	xmm3, DWORD PTR [rbx+68]
	movaps	xmm0, xmm2
	movaps	xmm4, xmm3
	mulss	xmm0, xmm11
	mulss	xmm4, xmm12
	addss	xmm4, xmm0
	comiss	xmm7, xmm4
	ja	$LN339@prim
	xorps	xmm4, xmm6
	comiss	xmm4, xmm5
	ja	$LN339@prim
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm7, DWORD PTR e2$6[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	movaps	xmm0, xmm8
	mulss	xmm0, DWORD PTR v0$1[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm9, xmm7
	andps	xmm9, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	movaps	xmm5, xmm7
	movss	xmm10, DWORD PTR v1$3[rsp]
	movaps	xmm4, xmm7
	mulss	xmm8, xmm10
	mulss	xmm5, xmm13
	mulss	xmm4, xmm14
	subss	xmm5, xmm0
	subss	xmm4, xmm8
	comiss	xmm5, xmm4
	jbe	SHORT $LN46@prim
	movaps	xmm0, xmm4
	movaps	xmm4, xmm5
	movaps	xmm5, xmm0
$LN46@prim:
	movss	xmm8, DWORD PTR [rbx+60]
	movaps	xmm0, xmm8
	mulss	xmm3, xmm9
	mulss	xmm0, xmm11
	addss	xmm3, xmm0
	comiss	xmm5, xmm3
	ja	$LN339@prim
	xorps	xmm3, xmm6
	comiss	xmm3, xmm4
	ja	$LN339@prim

; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);

	movaps	xmm3, xmm1
	movaps	xmm0, xmm7
	mulss	xmm1, DWORD PTR v2$2[rsp]
	mulss	xmm7, DWORD PTR v2$2[rsp+4]
	mulss	xmm3, xmm10
	mulss	xmm0, xmm15
	subss	xmm1, xmm7
	subss	xmm3, xmm0
	comiss	xmm3, xmm1
	jbe	SHORT $LN49@prim
	movaps	xmm0, xmm1
	movaps	xmm1, xmm3
	movaps	xmm3, xmm0
$LN49@prim:
	mulss	xmm2, xmm9
	mulss	xmm8, xmm12
	addss	xmm2, xmm8
	comiss	xmm3, xmm2
	ja	SHORT $LN339@prim
	xorps	xmm2, xmm6
	comiss	xmm2, xmm1
	ja	SHORT $LN339@prim

; 195  : 		if (!_tri())			return;
; 196  : 		RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	rdx, rax

; 197  : 		R.id		= prim;

	mov	eax, DWORD PTR prim$[rbp-256]
	mov	DWORD PTR [rdx+40], eax

; 198  : 		R.verts[0]	= v0;

	movsd	xmm0, QWORD PTR [rdi+r14*4]
	movsd	QWORD PTR [rdx], xmm0
	mov	ecx, DWORD PTR [rdi+r14*4+8]
	mov	DWORD PTR [rdx+8], ecx

; 199  : 		R.verts[1]	= v1;

	movsd	xmm0, QWORD PTR [rdi+r15*4]
	movsd	QWORD PTR [rdx+12], xmm0
	mov	ecx, DWORD PTR [rdi+r15*4+8]
	mov	DWORD PTR [rdx+20], ecx

; 200  : 		R.verts[2]	= v2;

	movsd	xmm0, QWORD PTR [rdi+r12*4]
	movsd	QWORD PTR [rdx+24], xmm0
	mov	eax, DWORD PTR [rdi+r12*4+8]
	mov	DWORD PTR [rdx+32], eax

; 201  : 		R.dummy		= T.dummy;

	mov	eax, DWORD PTR [rsi+12]
	mov	DWORD PTR [rdx+36], eax
$LN339@prim:
	movaps	xmm14, XMMWORD PTR [rsp+160]
	movaps	xmm13, XMMWORD PTR [rsp+176]
	movaps	xmm12, XMMWORD PTR [rsp+192]
	movaps	xmm15, XMMWORD PTR [rsp+144]
$LN1@prim:

; 202  : 	}

	lea	r11, QWORD PTR [rsp+312]
	movaps	xmm6, XMMWORD PTR [r11-24]
	movaps	xmm7, XMMWORD PTR [r11-40]
	movaps	xmm8, XMMWORD PTR [r11-56]
	movaps	xmm9, XMMWORD PTR [r11-72]
	movaps	xmm10, XMMWORD PTR [r11-88]
	movaps	xmm11, XMMWORD PTR [r11-104]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
?_prim@?$box_collider@$00$0A@@@QEAAXK@Z ENDP		; box_collider<1,0>::_prim
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_box@?$box_collider@$00$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z
_TEXT	SEGMENT
this$ = 8
C$ = 16
E$ = 24
?_box@?$box_collider@$00$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z PROC ; box_collider<1,0>::_box, COMDAT

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [r8]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rcx+36]
	ja	SHORT $LN9@box

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm2, DWORD PTR [r8+4]
	movaps	xmm0, xmm4
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rcx+40]
	ja	SHORT $LN9@box

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm5, DWORD PTR [rdx+8]
	movss	xmm1, DWORD PTR [r8+8]
	movaps	xmm0, xmm5
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rcx+44]
	ja	SHORT $LN9@box

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, DWORD PTR [rdx]
	movss	xmm0, DWORD PTR [rcx+24]
	comiss	xmm0, xmm3
	ja	SHORT $LN9@box

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	movss	xmm0, DWORD PTR [rcx+28]
	addss	xmm2, xmm4
	comiss	xmm0, xmm2
	ja	SHORT $LN9@box

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	movss	xmm0, DWORD PTR [rcx+32]
	addss	xmm1, xmm5
	comiss	xmm0, xmm1
	ja	SHORT $LN9@box

; 113  : 		return true;

	mov	al, 1

; 114  : 	};

	ret	0
$LN9@box:

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	xor	al, al

; 114  : 	};

	ret	0
?_box@?$box_collider@$00$0A@@@QEAA_NAEBU?$_vector3@M@@0@Z ENDP ; box_collider<1,0>::_box
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_prim@?$box_collider@$00$00@@QEAAXK@Z
_TEXT	SEGMENT
d$1$ = 32
v0$1 = 40
v2$2 = 56
v1$3 = 72
e1$4 = 88
e0$5 = 104
e2$6 = 120
$T7 = 384
this$ = 384
prim$ = 392
$T8 = 400
$T9 = 408
?_prim@?$box_collider@$00$00@@QEAAXK@Z PROC		; box_collider<1,1>::_prim, COMDAT

; 190  : 	{

$LN342:
	mov	DWORD PTR [rsp+16], edx
	mov	r11, rsp
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [r11-120]
	sub	rsp, 312				; 00000138H

; 191  : 		TRI&	T	= tris[prim];
; 192  : 		Fvector& v0	= verts[ T.verts[0] ];	mLeafVerts[0].x = v0.x;	mLeafVerts[0].y = v0.y;	mLeafVerts[0].z = v0.z;

	mov	rdi, QWORD PTR [rcx+16]
	mov	rbx, rcx
	movaps	XMMWORD PTR [r11-88], xmm6
	movaps	XMMWORD PTR [r11-104], xmm7
	movaps	XMMWORD PTR [r11-120], xmm8
	movaps	XMMWORD PTR [r11-136], xmm9
	movaps	XMMWORD PTR [r11-152], xmm10
	movaps	XMMWORD PTR [r11-168], xmm11
	mov	esi, edx
	shl	rsi, 4
	add	rsi, QWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rsi]
	lea	r14, QWORD PTR [rax+rax*2]
	movss	xmm11, DWORD PTR [rdi+r14*4]
	movss	DWORD PTR [rcx+72], xmm11
	movss	xmm9, DWORD PTR [rdi+r14*4+4]
	movss	DWORD PTR [rcx+76], xmm9
	movss	xmm7, DWORD PTR [rdi+r14*4+8]
	movss	DWORD PTR [rcx+80], xmm7

; 193  : 		Fvector& v1	= verts[ T.verts[1] ];	mLeafVerts[1].x = v1.x;	mLeafVerts[1].y = v1.y;	mLeafVerts[1].z = v1.z;

	mov	eax, DWORD PTR [rsi+4]
	lea	r15, QWORD PTR [rax+rax*2]
	movss	xmm6, DWORD PTR [rdi+r15*4]
	movss	DWORD PTR [rcx+84], xmm6
	movss	xmm4, DWORD PTR [rdi+r15*4+4]
	movss	DWORD PTR [rcx+88], xmm4
	movss	xmm2, DWORD PTR [rdi+r15*4+8]
	movss	DWORD PTR [rcx+92], xmm2

; 194  : 		Fvector& v2	= verts[ T.verts[2] ];	mLeafVerts[2].x = v2.x;	mLeafVerts[2].y = v2.y;	mLeafVerts[2].z = v2.z;

	mov	eax, DWORD PTR [rsi+8]
	lea	r12, QWORD PTR [rax+rax*2]
	movss	xmm8, DWORD PTR [rdi+r12*4]
	movss	DWORD PTR [rcx+96], xmm8
	movss	xmm5, DWORD PTR [rdi+r12*4+4]
	movss	DWORD PTR [rcx+100], xmm5
	movss	xmm3, DWORD PTR [rdi+r12*4+8]
	movss	DWORD PTR [rcx+104], xmm3

; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm10, DWORD PTR [rcx+60]
	subss	xmm6, xmm0
	subss	xmm11, xmm0
	subss	xmm8, xmm0
	movaps	xmm1, xmm6
	movss	DWORD PTR v1$3[rsp], xmm6
	minss	xmm1, xmm11
	movss	DWORD PTR v0$1[rsp], xmm11
	movaps	xmm0, xmm8
	movss	DWORD PTR v2$2[rsp], xmm8
	minss	xmm0, xmm1
	comiss	xmm0, xmm10
	ja	$LN1@prim

; 120  : 		v1.x = mLeafVerts[1].x - center.x;
; 121  : 		v2.x = mLeafVerts[2].x - center.x;
; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	maxss	xmm6, xmm11
	maxss	xmm8, xmm6

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm6, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm10, xmm6
	comiss	xmm10, xmm8
	ja	$LN1@prim

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;
; 132  : 		v2.y = mLeafVerts[2].y - center.y;
; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);
; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm8, DWORD PTR [rcx+64]
	subss	xmm4, xmm0
	subss	xmm9, xmm0
	subss	xmm5, xmm0
	movaps	xmm1, xmm4
	movss	DWORD PTR v1$3[rsp+4], xmm4
	minss	xmm1, xmm9
	movss	DWORD PTR v0$1[rsp+4], xmm9
	movaps	xmm0, xmm5
	movss	DWORD PTR v2$2[rsp+4], xmm5
	minss	xmm0, xmm1
	comiss	xmm0, xmm8
	ja	$LN1@prim
	maxss	xmm4, xmm9
	xorps	xmm8, xmm6
	maxss	xmm5, xmm4
	comiss	xmm8, xmm5
	ja	$LN1@prim

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;
; 140  : 		v2.z = mLeafVerts[2].z - center.z;
; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);
; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm4, DWORD PTR [rcx+68]
	subss	xmm2, xmm0
	subss	xmm7, xmm0
	subss	xmm3, xmm0
	movaps	xmm1, xmm2
	movss	DWORD PTR v1$3[rsp+8], xmm2
	minss	xmm1, xmm7
	movss	DWORD PTR v0$1[rsp+8], xmm7
	movaps	xmm0, xmm3
	movss	DWORD PTR v2$2[rsp+8], xmm3
	minss	xmm0, xmm1
	comiss	xmm0, xmm4
	ja	$LN1@prim
	maxss	xmm2, xmm7
	xorps	xmm4, xmm6
	maxss	xmm3, xmm2
	comiss	xmm4, xmm3
	ja	$LN1@prim

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;

	movaps	XMMWORD PTR [r11-184], xmm12
	lea	r8, QWORD PTR v0$1[rsp]
	movaps	XMMWORD PTR [r11-200], xmm13
	lea	rdx, QWORD PTR e0$5[rsp]
	movaps	XMMWORD PTR [r11-216], xmm14
	lea	rcx, QWORD PTR v1$3[rsp]
	movaps	XMMWORD PTR [r11-232], xmm15
	call	??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ; IceMaths::icePoint::operator-

; 149  : 		const Point e1 = v2 - v1;

	lea	r8, QWORD PTR v1$3[rsp]
	lea	rdx, QWORD PTR e1$4[rsp]
	lea	rcx, QWORD PTR v2$2[rsp]
	call	??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ; IceMaths::icePoint::operator-
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 396  : 									return Point(

	movss	xmm1, DWORD PTR e1$4[rsp+8]
	xorps	xmm10, xmm10
	movss	xmm3, DWORD PTR e1$4[rsp+4]
	movaps	xmm9, xmm1
	movss	xmm8, DWORD PTR e0$5[rsp+4]
	movaps	xmm0, xmm3
	movss	xmm12, DWORD PTR e0$5[rsp+8]
	movaps	xmm7, xmm3
	movss	xmm14, DWORD PTR e1$4[rsp]
	movss	xmm13, DWORD PTR e0$5[rsp]
	movaps	xmm2, xmm14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm15, DWORD PTR [rbx+60]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 396  : 									return Point(

	mulss	xmm0, xmm12
	mulss	xmm9, xmm8
	mulss	xmm2, xmm12
	subss	xmm9, xmm0
	mulss	xmm7, xmm13
	movaps	xmm0, xmm1
	mulss	xmm0, xmm13
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm9, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 396  : 									return Point(

	subss	xmm2, xmm0
	movaps	xmm0, xmm14
	mulss	xmm0, xmm8
	subss	xmm7, xmm0

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm4, xmm2
	xorps	xmm4, xmm6
	movaps	xmm0, xmm9
	mulss	xmm4, DWORD PTR v0$1[rsp+4]
	xorps	xmm0, xmm6

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, DWORD PTR v0$1[rsp]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm1, xmm7
	xorps	xmm1, xmm6

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, DWORD PTR v0$1[rsp+8]
	addss	xmm4, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movaps	xmm0, xmm15
	xorps	xmm0, xmm6
	movss	DWORD PTR $T7[rbp-256], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm4, xmm1
	movss	DWORD PTR d$1$[rsp], xmm4
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	jbe	SHORT $LN101@prim
	movss	DWORD PTR $T9[rbp-256], xmm15
	jmp	SHORT $LN98@prim
$LN101@prim:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movss	DWORD PTR $T9[rbp-256], xmm0
	movss	DWORD PTR $T7[rbp-256], xmm15
$LN98@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm2, xmm10
	movss	xmm0, DWORD PTR [rbx+64]
	movaps	xmm5, xmm0
	xorps	xmm5, xmm6
	jbe	SHORT $LN327@prim
	movss	DWORD PTR $T8[rbp-256], xmm0
	jmp	SHORT $LN328@prim
$LN327@prim:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movss	DWORD PTR $T8[rbp-256], xmm5
	movaps	xmm5, xmm0
$LN328@prim:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm7, xmm10
	movss	xmm0, DWORD PTR [rbx+68]
	movaps	xmm4, xmm0
	xorps	xmm4, xmm6
	jbe	SHORT $LN330@prim
	movaps	xmm11, xmm0
	jmp	SHORT $LN331@prim
$LN330@prim:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm11, xmm4
	movaps	xmm4, xmm0
$LN331@prim:

; 22   : 	for(udword q=0;q<=2;q++)

	movaps	xmm0, xmm2
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm4, xmm7
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 22   : 	for(udword q=0;q<=2;q++)

	mulss	xmm0, xmm5
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movaps	xmm1, xmm9
	mulss	xmm1, DWORD PTR $T7[rbp-256]
	addss	xmm1, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	movss	xmm0, DWORD PTR d$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm1, xmm4
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm1, xmm0
	comiss	xmm1, xmm10
	ja	$LN339@prim
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm2, DWORD PTR $T8[rbp-256]
	mulss	xmm9, DWORD PTR $T9[rbp-256]
	mulss	xmm7, xmm11
	addss	xmm2, xmm9
	addss	xmm2, xmm7
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm2, xmm0
	comiss	xmm2, xmm10
	jb	$LN339@prim
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm10, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm8
	mulss	xmm0, DWORD PTR v0$1[rsp+8]
	movaps	xmm5, xmm12
	mulss	xmm5, DWORD PTR v0$1[rsp+4]
	movaps	xmm7, xmm12
	mulss	xmm7, DWORD PTR v2$2[rsp+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm11, xmm8
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	subss	xmm5, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm9, xmm12
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm8
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm11, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	mulss	xmm0, DWORD PTR v2$2[rsp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm9, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	subss	xmm7, xmm0
	comiss	xmm5, xmm7
	jbe	SHORT $LN25@prim
	movaps	xmm0, xmm7
	movaps	xmm7, xmm5
	movaps	xmm5, xmm0
$LN25@prim:
	movss	xmm1, DWORD PTR [rbx+64]
	movss	xmm2, DWORD PTR [rbx+68]
	movaps	xmm0, xmm1
	movaps	xmm4, xmm2
	mulss	xmm0, xmm9
	mulss	xmm4, xmm11
	addss	xmm4, xmm0
	comiss	xmm5, xmm4
	ja	$LN339@prim
	xorps	xmm4, xmm6
	comiss	xmm4, xmm7
	ja	$LN339@prim

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movaps	xmm0, xmm12
	movaps	xmm4, xmm13
	mulss	xmm4, DWORD PTR v0$1[rsp+8]
	movaps	xmm5, xmm13
	mulss	xmm0, DWORD PTR v0$1[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm7, xmm13
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	mulss	xmm5, DWORD PTR v2$2[rsp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm7, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	mulss	xmm12, DWORD PTR v2$2[rsp]
	subss	xmm4, xmm0
	subss	xmm5, xmm12
	comiss	xmm4, xmm5
	jbe	SHORT $LN28@prim
	movaps	xmm0, xmm5
	movaps	xmm5, xmm4
	movaps	xmm4, xmm0
$LN28@prim:
	movaps	xmm0, xmm2
	mulss	xmm9, xmm15
	mulss	xmm0, xmm7
	addss	xmm0, xmm9
	comiss	xmm4, xmm0
	ja	$LN339@prim
	xorps	xmm0, xmm6
	comiss	xmm0, xmm5
	ja	$LN339@prim

; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);

	movss	xmm12, DWORD PTR v2$2[rsp+4]
	movaps	xmm4, xmm8
	mulss	xmm4, DWORD PTR v1$3[rsp]
	movaps	xmm0, xmm13
	mulss	xmm0, DWORD PTR v1$3[rsp+4]
	mulss	xmm8, DWORD PTR v2$2[rsp]
	mulss	xmm13, xmm12
	subss	xmm4, xmm0
	subss	xmm8, xmm13
	comiss	xmm4, xmm8
	jbe	SHORT $LN31@prim
	movaps	xmm0, xmm8
	movaps	xmm8, xmm4
	movaps	xmm4, xmm0
$LN31@prim:
	movaps	xmm0, xmm1
	mulss	xmm11, xmm15
	mulss	xmm0, xmm7
	addss	xmm0, xmm11
	comiss	xmm4, xmm0
	ja	$LN339@prim
	xorps	xmm0, xmm6
	comiss	xmm0, xmm8
	ja	$LN339@prim
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm11, DWORD PTR e1$4[rsp+8]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm0, xmm3
	movss	xmm13, DWORD PTR v0$1[rsp+8]
	movaps	xmm5, xmm11
	mulss	xmm5, DWORD PTR v0$1[rsp+4]
	movaps	xmm7, xmm11
	mulss	xmm0, xmm13
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm8, xmm3
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm7, xmm12
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm9, xmm11
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movss	xmm12, DWORD PTR v2$2[rsp+8]
	subss	xmm5, xmm0
	movaps	xmm0, xmm3
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm8, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm0, xmm12
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm9, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	subss	xmm7, xmm0
	comiss	xmm5, xmm7
	jbe	SHORT $LN34@prim
	movaps	xmm0, xmm7
	movaps	xmm7, xmm5
	movaps	xmm5, xmm0
$LN34@prim:
	movaps	xmm4, xmm2
	movaps	xmm0, xmm1
	mulss	xmm4, xmm8
	mulss	xmm0, xmm9
	addss	xmm4, xmm0
	comiss	xmm5, xmm4
	ja	$LN339@prim
	xorps	xmm4, xmm6
	comiss	xmm4, xmm7
	ja	$LN339@prim

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movaps	xmm0, xmm11
	movaps	xmm5, xmm14
	mulss	xmm11, DWORD PTR v2$2[rsp]
	movaps	xmm4, xmm14
	mulss	xmm5, xmm13
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm7, xmm14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movss	xmm13, DWORD PTR v0$1[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm7, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	mulss	xmm0, xmm13
	mulss	xmm4, xmm12
	subss	xmm5, xmm0
	subss	xmm4, xmm11
	comiss	xmm5, xmm4
	jbe	SHORT $LN37@prim
	movaps	xmm0, xmm4
	movaps	xmm4, xmm5
	movaps	xmm5, xmm0
$LN37@prim:
	mulss	xmm2, xmm7
	mulss	xmm9, xmm15
	addss	xmm2, xmm9
	comiss	xmm5, xmm2
	ja	$LN339@prim
	xorps	xmm2, xmm6
	comiss	xmm2, xmm4
	ja	$LN339@prim

; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);

	movaps	xmm2, xmm3
	movaps	xmm0, xmm14
	mulss	xmm0, DWORD PTR v0$1[rsp+4]
	mulss	xmm3, DWORD PTR v1$3[rsp]
	mulss	xmm14, DWORD PTR v1$3[rsp+4]
	mulss	xmm2, xmm13
	subss	xmm3, xmm14
	subss	xmm2, xmm0
	comiss	xmm2, xmm3
	jbe	SHORT $LN40@prim
	movaps	xmm0, xmm3
	movaps	xmm3, xmm2
	movaps	xmm2, xmm0
$LN40@prim:
	mulss	xmm1, xmm7
	mulss	xmm8, xmm15
	addss	xmm1, xmm8
	comiss	xmm2, xmm1
	ja	$LN339@prim
	xorps	xmm1, xmm6
	comiss	xmm1, xmm3
	ja	$LN339@prim

; 178  : 			
; 179  : 			const Point e2 = mLeafVerts[0] - mLeafVerts[2];

	lea	r8, QWORD PTR [rbx+96]
	lea	rdx, QWORD PTR e2$6[rsp]
	lea	rcx, QWORD PTR [rbx+72]
	call	??GicePoint@IceMaths@@QEBA?AV01@AEBV01@@Z ; IceMaths::icePoint::operator-
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm1, DWORD PTR e2$6[rsp+4]
	movss	xmm8, DWORD PTR e2$6[rbp-248]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm0, xmm1
	movss	xmm13, DWORD PTR v0$1[rsp+8]
	movaps	xmm7, xmm8
	mulss	xmm7, DWORD PTR v0$1[rsp+4]
	movaps	xmm5, xmm8
	movss	xmm15, DWORD PTR v1$3[rsp+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm12, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movss	xmm14, DWORD PTR v1$3[rsp+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm11, xmm8
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	mulss	xmm0, xmm13
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm12, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	mulss	xmm5, xmm15
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm11, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	subss	xmm7, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, xmm14
	subss	xmm5, xmm0
	comiss	xmm7, xmm5
	jbe	SHORT $LN43@prim
	movaps	xmm0, xmm5
	movaps	xmm5, xmm7
	movaps	xmm7, xmm0
$LN43@prim:
	movss	xmm2, DWORD PTR [rbx+64]
	movss	xmm3, DWORD PTR [rbx+68]
	movaps	xmm0, xmm2
	movaps	xmm4, xmm3
	mulss	xmm0, xmm11
	mulss	xmm4, xmm12
	addss	xmm4, xmm0
	comiss	xmm7, xmm4
	ja	$LN339@prim
	xorps	xmm4, xmm6
	comiss	xmm4, xmm5
	ja	$LN339@prim
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm7, DWORD PTR e2$6[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	movaps	xmm0, xmm8
	mulss	xmm0, DWORD PTR v0$1[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm9, xmm7
	andps	xmm9, xmm10
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	movaps	xmm5, xmm7
	movss	xmm10, DWORD PTR v1$3[rsp]
	movaps	xmm4, xmm7
	mulss	xmm8, xmm10
	mulss	xmm5, xmm13
	mulss	xmm4, xmm14
	subss	xmm5, xmm0
	subss	xmm4, xmm8
	comiss	xmm5, xmm4
	jbe	SHORT $LN46@prim
	movaps	xmm0, xmm4
	movaps	xmm4, xmm5
	movaps	xmm5, xmm0
$LN46@prim:
	movss	xmm8, DWORD PTR [rbx+60]
	movaps	xmm0, xmm8
	mulss	xmm3, xmm9
	mulss	xmm0, xmm11
	addss	xmm3, xmm0
	comiss	xmm5, xmm3
	ja	$LN339@prim
	xorps	xmm3, xmm6
	comiss	xmm3, xmm4
	ja	$LN339@prim

; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);

	movaps	xmm3, xmm1
	movaps	xmm0, xmm7
	mulss	xmm1, DWORD PTR v2$2[rsp]
	mulss	xmm7, DWORD PTR v2$2[rsp+4]
	mulss	xmm3, xmm10
	mulss	xmm0, xmm15
	subss	xmm1, xmm7
	subss	xmm3, xmm0
	comiss	xmm3, xmm1
	jbe	SHORT $LN49@prim
	movaps	xmm0, xmm1
	movaps	xmm1, xmm3
	movaps	xmm3, xmm0
$LN49@prim:
	mulss	xmm2, xmm9
	mulss	xmm8, xmm12
	addss	xmm2, xmm8
	comiss	xmm3, xmm2
	ja	SHORT $LN339@prim
	xorps	xmm2, xmm6
	comiss	xmm2, xmm1
	ja	SHORT $LN339@prim

; 195  : 		if (!_tri())			return;
; 196  : 		RESULT& R	= dest->r_add();

	mov	rcx, QWORD PTR [rbx]
	call	?r_add@COLLIDER@CDB@@QEAAAEAURESULT@2@XZ ; CDB::COLLIDER::r_add
	mov	rdx, rax

; 197  : 		R.id		= prim;

	mov	eax, DWORD PTR prim$[rbp-256]
	mov	DWORD PTR [rdx+40], eax

; 198  : 		R.verts[0]	= v0;

	movsd	xmm0, QWORD PTR [rdi+r14*4]
	movsd	QWORD PTR [rdx], xmm0
	mov	ecx, DWORD PTR [rdi+r14*4+8]
	mov	DWORD PTR [rdx+8], ecx

; 199  : 		R.verts[1]	= v1;

	movsd	xmm0, QWORD PTR [rdi+r15*4]
	movsd	QWORD PTR [rdx+12], xmm0
	mov	ecx, DWORD PTR [rdi+r15*4+8]
	mov	DWORD PTR [rdx+20], ecx

; 200  : 		R.verts[2]	= v2;

	movsd	xmm0, QWORD PTR [rdi+r12*4]
	movsd	QWORD PTR [rdx+24], xmm0
	mov	eax, DWORD PTR [rdi+r12*4+8]
	mov	DWORD PTR [rdx+32], eax

; 201  : 		R.dummy		= T.dummy;

	mov	eax, DWORD PTR [rsi+12]
	mov	DWORD PTR [rdx+36], eax
$LN339@prim:
	movaps	xmm14, XMMWORD PTR [rsp+160]
	movaps	xmm13, XMMWORD PTR [rsp+176]
	movaps	xmm12, XMMWORD PTR [rsp+192]
	movaps	xmm15, XMMWORD PTR [rsp+144]
$LN1@prim:

; 202  : 	}

	lea	r11, QWORD PTR [rsp+312]
	movaps	xmm6, XMMWORD PTR [r11-24]
	movaps	xmm7, XMMWORD PTR [r11-40]
	movaps	xmm8, XMMWORD PTR [r11-56]
	movaps	xmm9, XMMWORD PTR [r11-72]
	movaps	xmm10, XMMWORD PTR [r11-88]
	movaps	xmm11, XMMWORD PTR [r11-104]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
?_prim@?$box_collider@$00$00@@QEAAXK@Z ENDP		; box_collider<1,1>::_prim
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_box@?$box_collider@$00$00@@QEAA_NAEBU?$_vector3@M@@0@Z
_TEXT	SEGMENT
this$ = 8
C$ = 16
E$ = 24
?_box@?$box_collider@$00$00@@QEAA_NAEBU?$_vector3@M@@0@Z PROC ; box_collider<1,1>::_box, COMDAT

; 107  : 		if( b_max.x < C.x-E.x )	return false;

	movss	xmm3, DWORD PTR [r8]
	movss	xmm0, DWORD PTR [rdx]
	subss	xmm0, xmm3
	comiss	xmm0, DWORD PTR [rcx+36]
	ja	SHORT $LN9@box

; 108  : 		if( b_max.y < C.y-E.y )	return false;

	movss	xmm4, DWORD PTR [rdx+4]
	movss	xmm2, DWORD PTR [r8+4]
	movaps	xmm0, xmm4
	subss	xmm0, xmm2
	comiss	xmm0, DWORD PTR [rcx+40]
	ja	SHORT $LN9@box

; 109  : 		if( b_max.z < C.z-E.z )	return false;

	movss	xmm5, DWORD PTR [rdx+8]
	movss	xmm1, DWORD PTR [r8+8]
	movaps	xmm0, xmm5
	subss	xmm0, xmm1
	comiss	xmm0, DWORD PTR [rcx+44]
	ja	SHORT $LN9@box

; 110  : 		if( b_min.x > C.x+E.x )	return false;

	addss	xmm3, DWORD PTR [rdx]
	movss	xmm0, DWORD PTR [rcx+24]
	comiss	xmm0, xmm3
	ja	SHORT $LN9@box

; 111  : 		if( b_min.y > C.y+E.y )	return false;

	movss	xmm0, DWORD PTR [rcx+28]
	addss	xmm2, xmm4
	comiss	xmm0, xmm2
	ja	SHORT $LN9@box

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	movss	xmm0, DWORD PTR [rcx+32]
	addss	xmm1, xmm5
	comiss	xmm0, xmm1
	ja	SHORT $LN9@box

; 113  : 		return true;

	mov	al, 1

; 114  : 	};

	ret	0
$LN9@box:

; 112  : 		if( b_min.z > C.z+E.z )	return false;

	xor	al, al

; 114  : 	};

	ret	0
?_box@?$box_collider@$00$00@@QEAA_NAEBU?$_vector3@M@@0@Z ENDP ; box_collider<1,1>::_box
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 176
?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ PROC		; box_collider<0,0>::_tri, COMDAT

; 116  : 	{

$LN147:
	mov	rax, rsp
	sub	rsp, 168				; 000000a8H

; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]

; 120  : 		v1.x = mLeafVerts[1].x - center.x;

	movss	xmm4, DWORD PTR [rcx+84]
	movaps	XMMWORD PTR [rax-24], xmm6
	subss	xmm4, xmm0
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8

; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	movss	xmm8, DWORD PTR [rcx+96]
	movaps	XMMWORD PTR [rax-72], xmm9
	subss	xmm8, xmm0
	movss	xmm9, DWORD PTR [rcx+72]

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm4
	movaps	XMMWORD PTR [rax-88], xmm10
	subss	xmm9, xmm0
	movaps	XMMWORD PTR [rax-104], xmm11

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm11, DWORD PTR [rcx+60]
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	xmm0, xmm8
	movaps	XMMWORD PTR [rsp+32], xmm13
	minss	xmm1, xmm9
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	minss	xmm0, xmm1
	comiss	xmm0, xmm11
	ja	$LN19@tri
	movss	xmm7, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm4
	maxss	xmm1, xmm9
	movaps	xmm0, xmm8
	movaps	xmm6, xmm11
	xorps	xmm6, xmm7
	maxss	xmm0, xmm1
	comiss	xmm6, xmm0
	ja	$LN19@tri

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm13, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm5, DWORD PTR [rcx+100]
	subss	xmm13, xmm0
	movss	xmm12, DWORD PTR [rcx+76]
	subss	xmm5, xmm0

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm2, DWORD PTR [rcx+64]
	subss	xmm12, xmm0
	movaps	xmm1, xmm13
	movaps	xmm0, xmm5
	minss	xmm1, xmm12
	minss	xmm0, xmm1
	comiss	xmm0, xmm2
	ja	$LN19@tri

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm0, xmm13
	movaps	xmm1, xmm5
	maxss	xmm0, xmm12

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	xorps	xmm2, xmm7
	maxss	xmm1, xmm0
	comiss	xmm2, xmm1
	ja	$LN19@tri

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	movss	xmm15, DWORD PTR [rcx+92]

; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	movss	xmm10, DWORD PTR [rcx+104]
	subss	xmm15, xmm0
	movss	xmm14, DWORD PTR [rcx+80]
	subss	xmm10, xmm0

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm2, DWORD PTR [rcx+68]
	subss	xmm14, xmm0
	movaps	xmm1, xmm15
	movaps	xmm0, xmm10
	minss	xmm1, xmm14
	minss	xmm0, xmm1
	comiss	xmm0, xmm2
	ja	$LN19@tri

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	movaps	xmm0, xmm15
	movaps	xmm1, xmm10
	maxss	xmm0, xmm14

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	xorps	xmm2, xmm7
	maxss	xmm1, xmm0
	comiss	xmm2, xmm1
	ja	$LN19@tri
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm1, xmm15
	subss	xmm5, xmm13
	subss	xmm10, xmm15

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movaps	xmm3, xmm4

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	subss	xmm8, xmm4
	movaps	xmm2, xmm13
	subss	xmm1, xmm14

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm3, xmm9

; 396  : 									return Point(

	movaps	xmm0, xmm5

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	subss	xmm2, xmm12
	movaps	xmm13, xmm10
	movaps	xmm4, xmm8

; 396  : 									return Point(

	mulss	xmm0, xmm1

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mulss	xmm4, xmm1
	mulss	xmm13, xmm2
	mulss	xmm5, xmm3

; 396  : 									return Point(

	subss	xmm13, xmm0
	mulss	xmm8, xmm2
	mulss	xmm10, xmm3
	subss	xmm5, xmm8
	xorps	xmm8, xmm8
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm13, xmm8
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 396  : 									return Point(

	subss	xmm4, xmm10

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm0, xmm13
	xorps	xmm0, xmm7
	movaps	xmm1, xmm5

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, xmm9

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	xorps	xmm1, xmm7

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, xmm14

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm15, xmm4
	xorps	xmm15, xmm7
	mulss	xmm15, xmm12

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm15, xmm0
	addss	xmm15, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	jbe	SHORT $LN85@tri
	movaps	xmm10, xmm11
	jmp	SHORT $LN82@tri
$LN85@tri:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm10, xmm6
	movaps	xmm6, xmm11
$LN82@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm4, xmm8
	movss	xmm0, DWORD PTR [rcx+64]
	movaps	xmm1, xmm0
	xorps	xmm1, xmm7
	jbe	SHORT $LN137@tri
	movaps	xmm9, xmm0
	jmp	SHORT $LN138@tri
$LN137@tri:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm9, xmm1
	movaps	xmm1, xmm0
$LN138@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm5, xmm8
	movss	xmm0, DWORD PTR [rcx+68]
	movaps	xmm3, xmm0
	xorps	xmm3, xmm7
	jbe	SHORT $LN140@tri
	movaps	xmm7, xmm0
	jmp	SHORT $LN141@tri
$LN140@tri:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm7, xmm3
	movaps	xmm3, xmm0
$LN141@tri:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movaps	xmm2, xmm13
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 22   : 	for(udword q=0;q<=2;q++)

	movaps	xmm0, xmm4
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm2, xmm6
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 22   : 	for(udword q=0;q<=2;q++)

	mulss	xmm0, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movaps	xmm1, xmm5
	mulss	xmm1, xmm3
	addss	xmm2, xmm0
	addss	xmm2, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm2, xmm15
	comiss	xmm2, xmm8
	ja	SHORT $LN19@tri
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm4, xmm9
	mulss	xmm13, xmm10
	mulss	xmm7, xmm5
	addss	xmm4, xmm13
	addss	xmm4, xmm7
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm4, xmm15
	comiss	xmm4, xmm8
	jb	SHORT $LN19@tri

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;
; 149  : 		const Point e1 = v2 - v1;
; 150  : 		const Point normal = e0 ^ e1;
; 151  : 		const float d = -normal|v0;
; 152  : 		if(!planeBoxOverlap(normal, d, extents)) return false;
; 153  : 		
; 154  : 		// 3) "Class III" tests
; 155  : 		if(bClass3)
; 156  : 		{
; 157  : 			float rad;
; 158  : 			float min, max;
; 159  : 			// compute triangle edges
; 160  : 			// - edges lazy evaluated to take advantage of early exits
; 161  : 			// - fabs precomputed (half less work, possible since extents are always >0)
; 162  : 			// - customized macros to take advantage of the null component
; 163  : 			// - axis vector3 discarded, possibly saves useless movs
; 164  : 			
; 165  : 			const float fey0 = _abs(e0.y);
; 166  : 			const float fez0 = _abs(e0.z);
; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);
; 168  : 			const float fex0 = _abs(e0.x);
; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);
; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);
; 171  : 			
; 172  : 			const float fey1 = _abs(e1.y);
; 173  : 			const float fez1 = _abs(e1.z);
; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);
; 175  : 			const float fex1 = _abs(e1.x);
; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);
; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);
; 178  : 			
; 179  : 			const Point e2 = mLeafVerts[0] - mLeafVerts[2];
; 180  : 			const float fey2 = _abs(e2.y);
; 181  : 			const float fez2 = _abs(e2.z);
; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);
; 183  : 			const float fex2 = _abs(e2.x);
; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);
; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);
; 186  : 		}
; 187  : 		return true;

	mov	al, 1
	jmp	SHORT $LN62@tri
$LN19@tri:

; 188  : 	}

	xor	al, al
$LN62@tri:
	movaps	xmm13, XMMWORD PTR [rsp+32]
	lea	r11, QWORD PTR [rsp+168]
	movaps	xmm6, XMMWORD PTR [r11-24]
	movaps	xmm7, XMMWORD PTR [r11-40]
	movaps	xmm8, XMMWORD PTR [r11-56]
	movaps	xmm9, XMMWORD PTR [r11-72]
	movaps	xmm10, XMMWORD PTR [r11-88]
	movaps	xmm11, XMMWORD PTR [r11-104]
	movaps	xmm12, XMMWORD PTR [r11-120]
	movaps	xmm14, XMMWORD PTR [rsp+16]
	movaps	xmm15, XMMWORD PTR [rsp]
	mov	rsp, r11
	ret	0
?_tri@?$box_collider@$0A@$0A@@@QEAA_NXZ ENDP		; box_collider<0,0>::_tri
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_tri@?$box_collider@$0A@$00@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 176
?_tri@?$box_collider@$0A@$00@@QEAA_NXZ PROC		; box_collider<0,1>::_tri, COMDAT

; 116  : 	{

$LN147:
	mov	rax, rsp
	sub	rsp, 168				; 000000a8H

; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]

; 120  : 		v1.x = mLeafVerts[1].x - center.x;

	movss	xmm4, DWORD PTR [rcx+84]
	movaps	XMMWORD PTR [rax-24], xmm6
	subss	xmm4, xmm0
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8

; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	movss	xmm8, DWORD PTR [rcx+96]
	movaps	XMMWORD PTR [rax-72], xmm9
	subss	xmm8, xmm0
	movss	xmm9, DWORD PTR [rcx+72]

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm4
	movaps	XMMWORD PTR [rax-88], xmm10
	subss	xmm9, xmm0
	movaps	XMMWORD PTR [rax-104], xmm11

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm11, DWORD PTR [rcx+60]
	movaps	XMMWORD PTR [rax-120], xmm12
	movaps	xmm0, xmm8
	movaps	XMMWORD PTR [rsp+32], xmm13
	minss	xmm1, xmm9
	movaps	XMMWORD PTR [rsp+16], xmm14
	movaps	XMMWORD PTR [rsp], xmm15
	minss	xmm0, xmm1
	comiss	xmm0, xmm11
	ja	$LN19@tri
	movss	xmm7, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm4
	maxss	xmm1, xmm9
	movaps	xmm0, xmm8
	movaps	xmm6, xmm11
	xorps	xmm6, xmm7
	maxss	xmm0, xmm1
	comiss	xmm6, xmm0
	ja	$LN19@tri

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm13, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm5, DWORD PTR [rcx+100]
	subss	xmm13, xmm0
	movss	xmm12, DWORD PTR [rcx+76]
	subss	xmm5, xmm0

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm2, DWORD PTR [rcx+64]
	subss	xmm12, xmm0
	movaps	xmm1, xmm13
	movaps	xmm0, xmm5
	minss	xmm1, xmm12
	minss	xmm0, xmm1
	comiss	xmm0, xmm2
	ja	$LN19@tri

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm0, xmm13
	movaps	xmm1, xmm5
	maxss	xmm0, xmm12

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	xorps	xmm2, xmm7
	maxss	xmm1, xmm0
	comiss	xmm2, xmm1
	ja	$LN19@tri

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	movss	xmm15, DWORD PTR [rcx+92]

; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	movss	xmm10, DWORD PTR [rcx+104]
	subss	xmm15, xmm0
	movss	xmm14, DWORD PTR [rcx+80]
	subss	xmm10, xmm0

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm2, DWORD PTR [rcx+68]
	subss	xmm14, xmm0
	movaps	xmm1, xmm15
	movaps	xmm0, xmm10
	minss	xmm1, xmm14
	minss	xmm0, xmm1
	comiss	xmm0, xmm2
	ja	$LN19@tri

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	movaps	xmm0, xmm15
	movaps	xmm1, xmm10
	maxss	xmm0, xmm14

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	xorps	xmm2, xmm7
	maxss	xmm1, xmm0
	comiss	xmm2, xmm1
	ja	$LN19@tri
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm1, xmm15
	subss	xmm5, xmm13
	subss	xmm10, xmm15

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movaps	xmm3, xmm4

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	subss	xmm8, xmm4
	movaps	xmm2, xmm13
	subss	xmm1, xmm14

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	subss	xmm3, xmm9

; 396  : 									return Point(

	movaps	xmm0, xmm5

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	subss	xmm2, xmm12
	movaps	xmm13, xmm10
	movaps	xmm4, xmm8

; 396  : 									return Point(

	mulss	xmm0, xmm1

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	mulss	xmm4, xmm1
	mulss	xmm13, xmm2
	mulss	xmm5, xmm3

; 396  : 									return Point(

	subss	xmm13, xmm0
	mulss	xmm8, xmm2
	mulss	xmm10, xmm3
	subss	xmm5, xmm8
	xorps	xmm8, xmm8
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm13, xmm8
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 396  : 									return Point(

	subss	xmm4, xmm10

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm0, xmm13
	xorps	xmm0, xmm7
	movaps	xmm1, xmm5

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, xmm9

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	xorps	xmm1, xmm7

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, xmm14

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm15, xmm4
	xorps	xmm15, xmm7
	mulss	xmm15, xmm12

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm15, xmm0
	addss	xmm15, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	jbe	SHORT $LN85@tri
	movaps	xmm10, xmm11
	jmp	SHORT $LN82@tri
$LN85@tri:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm10, xmm6
	movaps	xmm6, xmm11
$LN82@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm4, xmm8
	movss	xmm0, DWORD PTR [rcx+64]
	movaps	xmm1, xmm0
	xorps	xmm1, xmm7
	jbe	SHORT $LN137@tri
	movaps	xmm9, xmm0
	jmp	SHORT $LN138@tri
$LN137@tri:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm9, xmm1
	movaps	xmm1, xmm0
$LN138@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm5, xmm8
	movss	xmm0, DWORD PTR [rcx+68]
	movaps	xmm3, xmm0
	xorps	xmm3, xmm7
	jbe	SHORT $LN140@tri
	movaps	xmm7, xmm0
	jmp	SHORT $LN141@tri
$LN140@tri:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movaps	xmm7, xmm3
	movaps	xmm3, xmm0
$LN141@tri:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movaps	xmm2, xmm13
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 22   : 	for(udword q=0;q<=2;q++)

	movaps	xmm0, xmm4
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm2, xmm6
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 22   : 	for(udword q=0;q<=2;q++)

	mulss	xmm0, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movaps	xmm1, xmm5
	mulss	xmm1, xmm3
	addss	xmm2, xmm0
	addss	xmm2, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm2, xmm15
	comiss	xmm2, xmm8
	ja	SHORT $LN19@tri
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm4, xmm9
	mulss	xmm13, xmm10
	mulss	xmm7, xmm5
	addss	xmm4, xmm13
	addss	xmm4, xmm7
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm4, xmm15
	comiss	xmm4, xmm8
	jb	SHORT $LN19@tri

; 144  : 		
; 145  : 		// 2) Test if the box intersects the plane of the triangle
; 146  : 		// compute plane equation of triangle: normal*x+d=0
; 147  : 		// ### could be precomputed since we use the same leaf triangle several times
; 148  : 		const Point e0 = v1 - v0;
; 149  : 		const Point e1 = v2 - v1;
; 150  : 		const Point normal = e0 ^ e1;
; 151  : 		const float d = -normal|v0;
; 152  : 		if(!planeBoxOverlap(normal, d, extents)) return false;
; 153  : 		
; 154  : 		// 3) "Class III" tests
; 155  : 		if(bClass3)
; 156  : 		{
; 157  : 			float rad;
; 158  : 			float min, max;
; 159  : 			// compute triangle edges
; 160  : 			// - edges lazy evaluated to take advantage of early exits
; 161  : 			// - fabs precomputed (half less work, possible since extents are always >0)
; 162  : 			// - customized macros to take advantage of the null component
; 163  : 			// - axis vector3 discarded, possibly saves useless movs
; 164  : 			
; 165  : 			const float fey0 = _abs(e0.y);
; 166  : 			const float fez0 = _abs(e0.z);
; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);
; 168  : 			const float fex0 = _abs(e0.x);
; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);
; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);
; 171  : 			
; 172  : 			const float fey1 = _abs(e1.y);
; 173  : 			const float fez1 = _abs(e1.z);
; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);
; 175  : 			const float fex1 = _abs(e1.x);
; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);
; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);
; 178  : 			
; 179  : 			const Point e2 = mLeafVerts[0] - mLeafVerts[2];
; 180  : 			const float fey2 = _abs(e2.y);
; 181  : 			const float fez2 = _abs(e2.z);
; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);
; 183  : 			const float fex2 = _abs(e2.x);
; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);
; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);
; 186  : 		}
; 187  : 		return true;

	mov	al, 1
	jmp	SHORT $LN62@tri
$LN19@tri:

; 188  : 	}

	xor	al, al
$LN62@tri:
	movaps	xmm13, XMMWORD PTR [rsp+32]
	lea	r11, QWORD PTR [rsp+168]
	movaps	xmm6, XMMWORD PTR [r11-24]
	movaps	xmm7, XMMWORD PTR [r11-40]
	movaps	xmm8, XMMWORD PTR [r11-56]
	movaps	xmm9, XMMWORD PTR [r11-72]
	movaps	xmm10, XMMWORD PTR [r11-88]
	movaps	xmm11, XMMWORD PTR [r11-104]
	movaps	xmm12, XMMWORD PTR [r11-120]
	movaps	xmm14, XMMWORD PTR [rsp+16]
	movaps	xmm15, XMMWORD PTR [rsp]
	mov	rsp, r11
	ret	0
?_tri@?$box_collider@$0A@$00@@QEAA_NXZ ENDP		; box_collider<0,1>::_tri
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_tri@?$box_collider@$00$0A@@@QEAA_NXZ
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
fey0$1$ = 0
$T3 = 4
fex0$1$ = 4
fez0$1$ = 8
$T4 = 8
e0$$sroa$1295$1$ = 12
fey1$1$ = 12
tv2651 = 16
d$1$ = 20
v2$$sroa$1294$1$ = 24
tv2649 = 28
e1$$sroa$1303$1$ = 32
e0$$sroa$1282$1$ = 224
fez1$1$ = 224
tv2487 = 224
this$ = 224
e1$$sroa$1283$1$ = 232
fez2$1$ = 232
e0$$sroa$1277$1$ = 240
fey2$1$ = 240
fex1$1$ = 240
e1$$sroa$1285$1$ = 248
tv2488 = 248
?_tri@?$box_collider@$00$0A@@@QEAA_NXZ PROC		; box_collider<1,0>::_tri, COMDAT

; 116  : 	{

$LN148:
	mov	rax, rsp
	sub	rsp, 216				; 000000d8H

; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]

; 120  : 		v1.x = mLeafVerts[1].x - center.x;

	movss	xmm3, DWORD PTR [rcx+84]

; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	movss	xmm4, DWORD PTR [rcx+96]
	subss	xmm3, xmm0
	movaps	XMMWORD PTR [rax-24], xmm6
	subss	xmm4, xmm0
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm3

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm10, DWORD PTR [rcx+60]
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rsp+80], xmm13
	movss	xmm13, DWORD PTR [rcx+72]
	subss	xmm13, xmm0
	movaps	XMMWORD PTR [rsp+64], xmm14
	movaps	xmm0, xmm4
	movaps	XMMWORD PTR [rsp+48], xmm15
	minss	xmm1, xmm13
	minss	xmm0, xmm1
	comiss	xmm0, xmm10
	ja	$LN19@tri
	movss	xmm7, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm3
	maxss	xmm1, xmm13
	movaps	xmm0, xmm4
	movaps	xmm2, xmm10
	xorps	xmm2, xmm7
	movss	DWORD PTR $T1[rsp], xmm2
	maxss	xmm0, xmm1
	comiss	xmm2, xmm0
	ja	$LN19@tri

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm15, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm14, DWORD PTR [rcx+100]
	subss	xmm15, xmm0
	movss	xmm9, DWORD PTR [rcx+76]
	subss	xmm14, xmm0

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm2, DWORD PTR [rcx+64]
	subss	xmm9, xmm0
	movaps	xmm1, xmm15
	movaps	xmm0, xmm14
	movss	DWORD PTR v2$$sroa$1294$1$[rsp], xmm14
	minss	xmm1, xmm9
	minss	xmm0, xmm1
	comiss	xmm0, xmm2
	ja	$LN19@tri

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm0, xmm15
	movaps	xmm1, xmm14
	maxss	xmm0, xmm9
	maxss	xmm1, xmm0

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movaps	xmm0, xmm2
	xorps	xmm0, xmm7
	comiss	xmm0, xmm1
	ja	$LN19@tri

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	movss	xmm11, DWORD PTR [rcx+92]

; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	movss	xmm8, DWORD PTR [rcx+104]
	subss	xmm11, xmm0
	movss	xmm5, DWORD PTR [rcx+80]
	subss	xmm8, xmm0

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm6, DWORD PTR [rcx+68]
	subss	xmm5, xmm0
	movaps	xmm1, xmm11
	movaps	xmm0, xmm8
	minss	xmm1, xmm5
	minss	xmm0, xmm1
	comiss	xmm0, xmm6
	ja	$LN19@tri

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	movaps	xmm0, xmm11
	movaps	xmm1, xmm8
	maxss	xmm0, xmm5
	maxss	xmm1, xmm0

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movaps	xmm0, xmm6
	xorps	xmm0, xmm7
	comiss	xmm0, xmm1
	ja	$LN19@tri
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movaps	XMMWORD PTR [rax-120], xmm12

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm0, xmm15
	subss	xmm0, xmm9
	movaps	xmm12, xmm11
	subss	xmm12, xmm5

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movaps	xmm1, xmm3
	subss	xmm1, xmm13

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR e0$$sroa$1282$1$[rsp], xmm0
	movaps	xmm0, xmm4
	subss	xmm0, xmm3
	movss	DWORD PTR e0$$sroa$1277$1$[rsp], xmm12

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	DWORD PTR e0$$sroa$1295$1$[rsp], xmm1

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR e1$$sroa$1285$1$[rsp], xmm0
	movaps	xmm0, xmm14
	subss	xmm0, xmm15
	movss	DWORD PTR e1$$sroa$1283$1$[rsp], xmm0
	movaps	xmm0, xmm8
	subss	xmm0, xmm11
	movaps	xmm14, xmm0
	movss	DWORD PTR e1$$sroa$1303$1$[rsp], xmm0
	mulss	xmm14, DWORD PTR e0$$sroa$1282$1$[rsp]

; 396  : 									return Point(

	movss	xmm0, DWORD PTR e1$$sroa$1283$1$[rsp]
	mulss	xmm0, xmm12

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm12, DWORD PTR e1$$sroa$1285$1$[rsp]
	mulss	xmm12, DWORD PTR e0$$sroa$1277$1$[rsp]

; 396  : 									return Point(

	subss	xmm14, xmm0
	movss	xmm0, DWORD PTR e1$$sroa$1303$1$[rsp]
	mulss	xmm0, xmm1
	subss	xmm12, xmm0
	movss	DWORD PTR tv2651[rsp], xmm14
	movss	xmm0, DWORD PTR e1$$sroa$1285$1$[rsp]
	mulss	xmm0, DWORD PTR e0$$sroa$1282$1$[rsp]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm14, DWORD PTR e1$$sroa$1283$1$[rsp]
	mulss	xmm14, xmm1
	movaps	xmm1, xmm12
	xorps	xmm1, xmm7
	mulss	xmm1, xmm9

; 396  : 									return Point(

	subss	xmm14, xmm0

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm0, DWORD PTR tv2651[rsp]
	xorps	xmm0, xmm7

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, xmm13

; 396  : 									return Point(

	movss	DWORD PTR tv2649[rsp], xmm14

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm1, xmm0
	movss	DWORD PTR d$1$[rsp], xmm1

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm1, xmm14

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movss	xmm0, DWORD PTR d$1$[rsp]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	xorps	xmm1, xmm7

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, xmm5
	addss	xmm0, xmm1
	xorps	xmm1, xmm1
	movss	DWORD PTR d$1$[rsp], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm0, DWORD PTR tv2651[rsp]
	comiss	xmm0, xmm1
	movss	xmm0, DWORD PTR $T1[rsp]
	jbe	SHORT $LN85@tri
	movss	DWORD PTR $T3[rsp], xmm10
	jmp	SHORT $LN82@tri
$LN85@tri:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movss	DWORD PTR $T3[rsp], xmm0
	movaps	xmm0, xmm10
$LN82@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm12, DWORD PTR __real@00000000
	movaps	xmm1, xmm2
	movaps	xmm14, xmm2
	xorps	xmm1, xmm7
	jbe	SHORT $LN137@tri
	movss	DWORD PTR $T2[rsp], xmm14
	jmp	SHORT $LN138@tri
$LN137@tri:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movss	DWORD PTR $T2[rsp], xmm1
	movaps	xmm1, xmm14
$LN138@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movaps	xmm14, xmm6
	xorps	xmm14, xmm7
	movss	xmm7, DWORD PTR tv2649[rsp]
	comiss	xmm7, DWORD PTR __real@00000000
	jbe	SHORT $LN140@tri
	movss	DWORD PTR $T4[rsp], xmm6
	jmp	SHORT $LN141@tri
$LN140@tri:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movss	DWORD PTR $T4[rsp], xmm14
	movaps	xmm14, xmm6
$LN141@tri:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, DWORD PTR tv2651[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	movss	xmm7, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, xmm12
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv2649[rsp]
	mulss	xmm0, xmm14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	movss	xmm14, DWORD PTR v2$$sroa$1294$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm1, xmm0
	xorps	xmm0, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm1, DWORD PTR d$1$[rsp]
	comiss	xmm1, xmm0
	ja	$LN39@tri
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm12, DWORD PTR $T2[rsp]
	movss	xmm0, DWORD PTR tv2651[rsp]
	mulss	xmm0, DWORD PTR $T3[rsp]
	addss	xmm12, xmm0
	movss	xmm0, DWORD PTR tv2649[rsp]
	mulss	xmm0, DWORD PTR $T4[rsp]
	addss	xmm12, xmm0
	xorps	xmm0, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm12, DWORD PTR d$1$[rsp]
	comiss	xmm12, xmm0
	jb	$LN39@tri
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm1, DWORD PTR e0$$sroa$1282$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm5
	mulss	xmm0, DWORD PTR e0$$sroa$1282$1$[rsp]
	movaps	xmm12, xmm9
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	mulss	xmm12, DWORD PTR e0$$sroa$1277$1$[rsp]
	mulss	xmm14, DWORD PTR e0$$sroa$1277$1$[rsp]
	subss	xmm12, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	DWORD PTR fey0$1$[rsp], xmm1
	movss	xmm1, DWORD PTR e0$$sroa$1277$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm8
	mulss	xmm0, DWORD PTR e0$$sroa$1282$1$[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	movss	DWORD PTR fez0$1$[rsp], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	subss	xmm14, xmm0
	comiss	xmm12, xmm14
	jbe	SHORT $LN22@tri
	movaps	xmm0, xmm14
	movaps	xmm14, xmm12
	movaps	xmm12, xmm0
$LN22@tri:
	movaps	xmm1, xmm2
	movaps	xmm0, xmm6
	mulss	xmm1, DWORD PTR fez0$1$[rsp]
	mulss	xmm0, DWORD PTR fey0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm12, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm14
	ja	$LN39@tri
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm1, DWORD PTR e0$$sroa$1295$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movaps	xmm12, xmm8
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm0, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	mulss	xmm12, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movaps	xmm14, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	DWORD PTR fex0$1$[rsp], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movaps	xmm0, xmm13
	mulss	xmm0, DWORD PTR e0$$sroa$1277$1$[rsp]
	mulss	xmm14, xmm5
	subss	xmm14, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR e0$$sroa$1277$1$[rsp]
	subss	xmm12, xmm0
	comiss	xmm14, xmm12
	jbe	SHORT $LN25@tri
	movaps	xmm0, xmm12
	movaps	xmm12, xmm14
	movaps	xmm14, xmm0
$LN25@tri:
	movaps	xmm1, xmm6
	movaps	xmm0, xmm10
	mulss	xmm1, DWORD PTR fex0$1$[rsp]
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm14, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm12
	ja	$LN39@tri

; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);

	movss	xmm1, DWORD PTR e0$$sroa$1295$1$[rsp]
	movaps	xmm0, xmm15
	mulss	xmm0, xmm1
	movaps	xmm14, xmm3
	mulss	xmm1, DWORD PTR v2$$sroa$1294$1$[rsp]
	movaps	xmm12, xmm4
	mulss	xmm14, DWORD PTR e0$$sroa$1282$1$[rsp]
	mulss	xmm12, DWORD PTR e0$$sroa$1282$1$[rsp]
	subss	xmm14, xmm0
	subss	xmm12, xmm1
	comiss	xmm14, xmm12
	jbe	SHORT $LN28@tri
	movaps	xmm0, xmm12
	movaps	xmm12, xmm14
	movaps	xmm14, xmm0
$LN28@tri:
	movaps	xmm1, xmm2
	movaps	xmm0, xmm10
	mulss	xmm1, DWORD PTR fex0$1$[rsp]
	mulss	xmm0, DWORD PTR fey0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm14, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm12
	ja	$LN39@tri
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm14, DWORD PTR e1$$sroa$1283$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm0, xmm5
	mulss	xmm0, xmm14
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm1, xmm14
	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	movss	DWORD PTR fey1$1$[rsp], xmm1
	movss	xmm1, DWORD PTR e1$$sroa$1303$1$[rsp]
	movaps	xmm12, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm14, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm12, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm14, DWORD PTR v2$$sroa$1294$1$[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	DWORD PTR fez1$1$[rsp], xmm12
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm12, xmm9
	mulss	xmm12, xmm1
	subss	xmm12, xmm0
	movaps	xmm0, xmm8
	mulss	xmm0, DWORD PTR e1$$sroa$1283$1$[rsp]
	subss	xmm14, xmm0
	comiss	xmm12, xmm14
	jbe	SHORT $LN31@tri
	movaps	xmm0, xmm14
	movaps	xmm14, xmm12
	movaps	xmm12, xmm0
$LN31@tri:
	movaps	xmm1, xmm6
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR fey1$1$[rsp]
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm12, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm14
	ja	$LN39@tri
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm1, DWORD PTR e1$$sroa$1285$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movaps	xmm12, xmm5
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm14, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	movaps	xmm0, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	mulss	xmm8, DWORD PTR e1$$sroa$1285$1$[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm0, xmm14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	mulss	xmm12, xmm1
	movss	xmm1, DWORD PTR e1$$sroa$1303$1$[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	DWORD PTR fex1$1$[rsp], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movaps	xmm0, xmm13
	mulss	xmm0, xmm1
	mulss	xmm1, xmm4
	subss	xmm12, xmm0
	subss	xmm8, xmm1
	comiss	xmm12, xmm8
	jbe	SHORT $LN34@tri
	movaps	xmm0, xmm8
	movaps	xmm8, xmm12
	movaps	xmm12, xmm0
$LN34@tri:
	movaps	xmm1, xmm6
	movaps	xmm0, xmm10
	mulss	xmm1, DWORD PTR fex1$1$[rsp]
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm12, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm8
	ja	$LN39@tri

; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);

	movaps	xmm0, xmm9
	movaps	xmm12, xmm13
	mulss	xmm0, DWORD PTR e1$$sroa$1285$1$[rsp]
	movaps	xmm8, xmm3
	mulss	xmm12, DWORD PTR e1$$sroa$1283$1$[rsp]
	mulss	xmm8, DWORD PTR e1$$sroa$1283$1$[rsp]
	subss	xmm12, xmm0
	movaps	xmm0, xmm15
	mulss	xmm0, DWORD PTR e1$$sroa$1285$1$[rsp]
	subss	xmm8, xmm0
	comiss	xmm12, xmm8
	jbe	SHORT $LN37@tri
	movaps	xmm0, xmm8
	movaps	xmm8, xmm12
	movaps	xmm12, xmm0
$LN37@tri:
	movaps	xmm1, xmm2
	movaps	xmm0, xmm10
	mulss	xmm1, DWORD PTR fex1$1$[rsp]
	mulss	xmm0, DWORD PTR fey1$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm12, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm8
	ja	$LN39@tri
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm0, DWORD PTR [rcx+80]
	subss	xmm0, DWORD PTR [rcx+104]
	movss	xmm1, DWORD PTR [rcx+76]
	subss	xmm1, DWORD PTR [rcx+100]
	movss	xmm12, DWORD PTR [rcx+72]
	subss	xmm12, DWORD PTR [rcx+96]
	movss	DWORD PTR tv2487[rsp], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 181  : 			const float fez2 = _abs(e2.z);

	mulss	xmm9, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm8, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	DWORD PTR tv2488[rsp], xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm8, xmm14
	movss	DWORD PTR fey2$1$[rsp], xmm8
	movaps	xmm8, xmm0
	andps	xmm8, xmm14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm0, xmm5
	mulss	xmm0, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	DWORD PTR fez2$1$[rsp], xmm8
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm8, xmm15
	mulss	xmm8, DWORD PTR tv2487[rsp]
	subss	xmm9, xmm0
	movaps	xmm0, xmm11
	mulss	xmm0, xmm1
	subss	xmm8, xmm0
	comiss	xmm9, xmm8
	jbe	SHORT $LN40@tri
	movaps	xmm0, xmm8
	movaps	xmm8, xmm9
	movaps	xmm9, xmm0
$LN40@tri:
	movaps	xmm1, xmm2
	movaps	xmm0, xmm6
	mulss	xmm1, DWORD PTR fez2$1$[rsp]
	mulss	xmm0, DWORD PTR fey2$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm9, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm8
	ja	$LN39@tri

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	mulss	xmm13, DWORD PTR tv2487[rsp]
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR tv2487[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm8, xmm12
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 183  : 			const float fex2 = _abs(e2.x);

	mulss	xmm5, xmm12
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm8, xmm14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	mulss	xmm11, xmm12
	subss	xmm5, xmm13
	subss	xmm11, xmm0
	comiss	xmm5, xmm11
	jbe	SHORT $LN43@tri
	movaps	xmm0, xmm11
	movaps	xmm11, xmm5
	movaps	xmm5, xmm0
$LN43@tri:
	movaps	xmm0, xmm10
	mulss	xmm6, xmm8
	mulss	xmm0, DWORD PTR fez2$1$[rsp]
	addss	xmm6, xmm0
	comiss	xmm5, xmm6
	ja	$LN39@tri
	xorps	xmm6, xmm7
	comiss	xmm6, xmm11
	ja	$LN39@tri

; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);

	movss	xmm0, DWORD PTR v2$$sroa$1294$1$[rsp]
	mulss	xmm3, DWORD PTR tv2488[rsp]
	mulss	xmm4, DWORD PTR tv2488[rsp]
	mulss	xmm0, xmm12
	mulss	xmm15, xmm12
	subss	xmm4, xmm0
	subss	xmm3, xmm15
	comiss	xmm3, xmm4
	jbe	SHORT $LN46@tri
	movaps	xmm0, xmm4
	movaps	xmm4, xmm3
	movaps	xmm3, xmm0
$LN46@tri:
	mulss	xmm10, DWORD PTR fey2$1$[rsp]
	mulss	xmm2, xmm8
	addss	xmm2, xmm10
	comiss	xmm3, xmm2
	ja	SHORT $LN39@tri
	xorps	xmm2, xmm7
	comiss	xmm2, xmm4
	ja	SHORT $LN39@tri

; 186  : 		}
; 187  : 		return true;

	mov	al, 1
$LN145@tri:
	movaps	xmm12, XMMWORD PTR [rsp+96]
$LN62@tri:

; 188  : 	}

	movaps	xmm13, XMMWORD PTR [rsp+80]
	lea	r11, QWORD PTR [rsp+216]
	movaps	xmm6, XMMWORD PTR [r11-24]
	movaps	xmm7, XMMWORD PTR [r11-40]
	movaps	xmm8, XMMWORD PTR [r11-56]
	movaps	xmm9, XMMWORD PTR [r11-72]
	movaps	xmm10, XMMWORD PTR [r11-88]
	movaps	xmm11, XMMWORD PTR [r11-104]
	movaps	xmm14, XMMWORD PTR [rsp+64]
	movaps	xmm15, XMMWORD PTR [rsp+48]
	mov	rsp, r11
	ret	0
$LN39@tri:

; 186  : 		}
; 187  : 		return true;

	xor	al, al
	jmp	SHORT $LN145@tri
$LN19@tri:
	xor	al, al
	jmp	SHORT $LN62@tri
?_tri@?$box_collider@$00$0A@@@QEAA_NXZ ENDP		; box_collider<1,0>::_tri
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp
;	COMDAT ?_tri@?$box_collider@$00$00@@QEAA_NXZ
_TEXT	SEGMENT
$T1 = 0
$T2 = 0
fey0$1$ = 0
$T3 = 4
fex0$1$ = 4
fez0$1$ = 8
$T4 = 8
e0$$sroa$1295$1$ = 12
fey1$1$ = 12
tv2651 = 16
d$1$ = 20
v2$$sroa$1294$1$ = 24
tv2649 = 28
e1$$sroa$1303$1$ = 32
e0$$sroa$1282$1$ = 224
fez1$1$ = 224
tv2487 = 224
this$ = 224
e1$$sroa$1283$1$ = 232
fez2$1$ = 232
e0$$sroa$1277$1$ = 240
fey2$1$ = 240
fex1$1$ = 240
e1$$sroa$1285$1$ = 248
tv2488 = 248
?_tri@?$box_collider@$00$00@@QEAA_NXZ PROC		; box_collider<1,1>::_tri, COMDAT

; 116  : 	{

$LN148:
	mov	rax, rsp
	sub	rsp, 216				; 000000d8H

; 117  : 		// move everything so that the boxcenter is in (0,0,0) 
; 118  : 		Point v0, v1, v2;
; 119  : 		v0.x = mLeafVerts[0].x - center.x;

	movss	xmm0, DWORD PTR [rcx+48]

; 120  : 		v1.x = mLeafVerts[1].x - center.x;

	movss	xmm3, DWORD PTR [rcx+84]

; 121  : 		v2.x = mLeafVerts[2].x - center.x;

	movss	xmm4, DWORD PTR [rcx+96]
	subss	xmm3, xmm0
	movaps	XMMWORD PTR [rax-24], xmm6
	subss	xmm4, xmm0
	movaps	XMMWORD PTR [rax-40], xmm7
	movaps	XMMWORD PTR [rax-56], xmm8
	movaps	XMMWORD PTR [rax-72], xmm9
	movaps	XMMWORD PTR [rax-88], xmm10

; 122  : 		
; 123  : 		// First, test overlap in the {x,y,z}-directions
; 124  : 		float min,max;
; 125  : 		// Find min, max of the triangle in x-direction, and test for overlap in X
; 126  : 		FINDMINMAX(v0.x, v1.x, v2.x, min, max);

	movaps	xmm1, xmm3

; 127  : 		if(min>extents.x || max<-extents.x) return false;

	movss	xmm10, DWORD PTR [rcx+60]
	movaps	XMMWORD PTR [rax-104], xmm11
	movaps	XMMWORD PTR [rsp+80], xmm13
	movss	xmm13, DWORD PTR [rcx+72]
	subss	xmm13, xmm0
	movaps	XMMWORD PTR [rsp+64], xmm14
	movaps	xmm0, xmm4
	movaps	XMMWORD PTR [rsp+48], xmm15
	minss	xmm1, xmm13
	minss	xmm0, xmm1
	comiss	xmm0, xmm10
	ja	$LN19@tri
	movss	xmm7, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm3
	maxss	xmm1, xmm13
	movaps	xmm0, xmm4
	movaps	xmm2, xmm10
	xorps	xmm2, xmm7
	movss	DWORD PTR $T1[rsp], xmm2
	maxss	xmm0, xmm1
	comiss	xmm2, xmm0
	ja	$LN19@tri

; 128  : 		
; 129  : 		// Same for Y
; 130  : 		v0.y = mLeafVerts[0].y - center.y;

	movss	xmm0, DWORD PTR [rcx+52]

; 131  : 		v1.y = mLeafVerts[1].y - center.y;

	movss	xmm15, DWORD PTR [rcx+88]

; 132  : 		v2.y = mLeafVerts[2].y - center.y;

	movss	xmm14, DWORD PTR [rcx+100]
	subss	xmm15, xmm0
	movss	xmm9, DWORD PTR [rcx+76]
	subss	xmm14, xmm0

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movss	xmm2, DWORD PTR [rcx+64]
	subss	xmm9, xmm0
	movaps	xmm1, xmm15
	movaps	xmm0, xmm14
	movss	DWORD PTR v2$$sroa$1294$1$[rsp], xmm14
	minss	xmm1, xmm9
	minss	xmm0, xmm1
	comiss	xmm0, xmm2
	ja	$LN19@tri

; 133  : 		
; 134  : 		FINDMINMAX(v0.y, v1.y, v2.y, min, max);

	movaps	xmm0, xmm15
	movaps	xmm1, xmm14
	maxss	xmm0, xmm9
	maxss	xmm1, xmm0

; 135  : 		if(min>extents.y || max<-extents.y) return false;

	movaps	xmm0, xmm2
	xorps	xmm0, xmm7
	comiss	xmm0, xmm1
	ja	$LN19@tri

; 136  : 		
; 137  : 		// Same for Z
; 138  : 		v0.z = mLeafVerts[0].z - center.z;

	movss	xmm0, DWORD PTR [rcx+56]

; 139  : 		v1.z = mLeafVerts[1].z - center.z;

	movss	xmm11, DWORD PTR [rcx+92]

; 140  : 		v2.z = mLeafVerts[2].z - center.z;

	movss	xmm8, DWORD PTR [rcx+104]
	subss	xmm11, xmm0
	movss	xmm5, DWORD PTR [rcx+80]
	subss	xmm8, xmm0

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movss	xmm6, DWORD PTR [rcx+68]
	subss	xmm5, xmm0
	movaps	xmm1, xmm11
	movaps	xmm0, xmm8
	minss	xmm1, xmm5
	minss	xmm0, xmm1
	comiss	xmm0, xmm6
	ja	$LN19@tri

; 141  : 		
; 142  : 		FINDMINMAX(v0.z, v1.z, v2.z, min, max);

	movaps	xmm0, xmm11
	movaps	xmm1, xmm8
	maxss	xmm0, xmm5
	maxss	xmm1, xmm0

; 143  : 		if(min>extents.z || max<-extents.z) return false;

	movaps	xmm0, xmm6
	xorps	xmm0, xmm7
	comiss	xmm0, xmm1
	ja	$LN19@tri
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movaps	XMMWORD PTR [rax-120], xmm12

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm0, xmm15
	subss	xmm0, xmm9
	movaps	xmm12, xmm11
	subss	xmm12, xmm5

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movaps	xmm1, xmm3
	subss	xmm1, xmm13

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR e0$$sroa$1282$1$[rsp], xmm0
	movaps	xmm0, xmm4
	subss	xmm0, xmm3
	movss	DWORD PTR e0$$sroa$1277$1$[rsp], xmm12

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	DWORD PTR e0$$sroa$1295$1$[rsp], xmm1

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	DWORD PTR e1$$sroa$1285$1$[rsp], xmm0
	movaps	xmm0, xmm14
	subss	xmm0, xmm15
	movss	DWORD PTR e1$$sroa$1283$1$[rsp], xmm0
	movaps	xmm0, xmm8
	subss	xmm0, xmm11
	movaps	xmm14, xmm0
	movss	DWORD PTR e1$$sroa$1303$1$[rsp], xmm0
	mulss	xmm14, DWORD PTR e0$$sroa$1282$1$[rsp]

; 396  : 									return Point(

	movss	xmm0, DWORD PTR e1$$sroa$1283$1$[rsp]
	mulss	xmm0, xmm12

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm12, DWORD PTR e1$$sroa$1285$1$[rsp]
	mulss	xmm12, DWORD PTR e0$$sroa$1277$1$[rsp]

; 396  : 									return Point(

	subss	xmm14, xmm0
	movss	xmm0, DWORD PTR e1$$sroa$1303$1$[rsp]
	mulss	xmm0, xmm1
	subss	xmm12, xmm0
	movss	DWORD PTR tv2651[rsp], xmm14
	movss	xmm0, DWORD PTR e1$$sroa$1285$1$[rsp]
	mulss	xmm0, DWORD PTR e0$$sroa$1282$1$[rsp]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm14, DWORD PTR e1$$sroa$1283$1$[rsp]
	mulss	xmm14, xmm1
	movaps	xmm1, xmm12
	xorps	xmm1, xmm7
	mulss	xmm1, xmm9

; 396  : 									return Point(

	subss	xmm14, xmm0

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movss	xmm0, DWORD PTR tv2651[rsp]
	xorps	xmm0, xmm7

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, xmm13

; 396  : 									return Point(

	movss	DWORD PTR tv2649[rsp], xmm14

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm1, xmm0
	movss	DWORD PTR d$1$[rsp], xmm1

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	movaps	xmm1, xmm14

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	movss	xmm0, DWORD PTR d$1$[rsp]

; 46   : 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}

	xorps	xmm1, xmm7

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm1, xmm5
	addss	xmm0, xmm1
	xorps	xmm1, xmm1
	movss	DWORD PTR d$1$[rsp], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movss	xmm0, DWORD PTR tv2651[rsp]
	comiss	xmm0, xmm1
	movss	xmm0, DWORD PTR $T1[rsp]
	jbe	SHORT $LN85@tri
	movss	DWORD PTR $T3[rsp], xmm10
	jmp	SHORT $LN82@tri
$LN85@tri:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movss	DWORD PTR $T3[rsp], xmm0
	movaps	xmm0, xmm10
$LN82@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	comiss	xmm12, DWORD PTR __real@00000000
	movaps	xmm1, xmm2
	movaps	xmm14, xmm2
	xorps	xmm1, xmm7
	jbe	SHORT $LN137@tri
	movss	DWORD PTR $T2[rsp], xmm14
	jmp	SHORT $LN138@tri
$LN137@tri:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movss	DWORD PTR $T2[rsp], xmm1
	movaps	xmm1, xmm14
$LN138@tri:

; 24   : 		if(((const float*)normal)[q]>0.0f)	{ ((float*)vmin)[q]=-((const float*)maxbox)[q]; ((float*)vmax)[q]=((const float*)maxbox)[q]; }

	movaps	xmm14, xmm6
	xorps	xmm14, xmm7
	movss	xmm7, DWORD PTR tv2649[rsp]
	comiss	xmm7, DWORD PTR __real@00000000
	jbe	SHORT $LN140@tri
	movss	DWORD PTR $T4[rsp], xmm6
	jmp	SHORT $LN141@tri
$LN140@tri:

; 25   : 		else								{ ((float*)vmin)[q]=((const float*)maxbox)[q]; ((float*)vmax)[q]=-((const float*)maxbox)[q]; }

	movss	DWORD PTR $T4[rsp], xmm14
	movaps	xmm14, xmm6
$LN141@tri:
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm0, DWORD PTR tv2651[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	movss	xmm7, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, xmm12
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv2649[rsp]
	mulss	xmm0, xmm14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	movss	xmm14, DWORD PTR v2$$sroa$1294$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	addss	xmm1, xmm0
	xorps	xmm0, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 27   : 	if((normal|vmin)+d>0.0f) return false;

	addss	xmm1, DWORD PTR d$1$[rsp]
	comiss	xmm1, xmm0
	ja	$LN39@tri
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 392  : 		inline_	float			operator|(const Point& p)			const		{ return x*p.x + y*p.y + z*p.z;						}

	mulss	xmm12, DWORD PTR $T2[rsp]
	movss	xmm0, DWORD PTR tv2651[rsp]
	mulss	xmm0, DWORD PTR $T3[rsp]
	addss	xmm12, xmm0
	movss	xmm0, DWORD PTR tv2649[rsp]
	mulss	xmm0, DWORD PTR $T4[rsp]
	addss	xmm12, xmm0
	xorps	xmm0, xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 28   : 	if((normal|vmax)+d>=0.0f) return true;

	addss	xmm12, DWORD PTR d$1$[rsp]
	comiss	xmm12, xmm0
	jb	$LN39@tri
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm1, DWORD PTR e0$$sroa$1282$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm5
	mulss	xmm0, DWORD PTR e0$$sroa$1282$1$[rsp]
	movaps	xmm12, xmm9
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	mulss	xmm12, DWORD PTR e0$$sroa$1277$1$[rsp]
	mulss	xmm14, DWORD PTR e0$$sroa$1277$1$[rsp]
	subss	xmm12, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	DWORD PTR fey0$1$[rsp], xmm1
	movss	xmm1, DWORD PTR e0$$sroa$1277$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	movaps	xmm0, xmm8
	mulss	xmm0, DWORD PTR e0$$sroa$1282$1$[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	movss	DWORD PTR fez0$1$[rsp], xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 167  : 			AXISTEST_X01(e0.z, e0.y, fez0, fey0);

	subss	xmm14, xmm0
	comiss	xmm12, xmm14
	jbe	SHORT $LN22@tri
	movaps	xmm0, xmm14
	movaps	xmm14, xmm12
	movaps	xmm12, xmm0
$LN22@tri:
	movaps	xmm1, xmm2
	movaps	xmm0, xmm6
	mulss	xmm1, DWORD PTR fez0$1$[rsp]
	mulss	xmm0, DWORD PTR fey0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm12, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm14
	ja	$LN39@tri
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm1, DWORD PTR e0$$sroa$1295$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movaps	xmm12, xmm8
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm0, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	mulss	xmm12, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movaps	xmm14, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	DWORD PTR fex0$1$[rsp], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 169  : 			AXISTEST_Y02(e0.z, e0.x, fez0, fex0);

	movaps	xmm0, xmm13
	mulss	xmm0, DWORD PTR e0$$sroa$1277$1$[rsp]
	mulss	xmm14, xmm5
	subss	xmm14, xmm0
	movaps	xmm0, xmm4
	mulss	xmm0, DWORD PTR e0$$sroa$1277$1$[rsp]
	subss	xmm12, xmm0
	comiss	xmm14, xmm12
	jbe	SHORT $LN25@tri
	movaps	xmm0, xmm12
	movaps	xmm12, xmm14
	movaps	xmm14, xmm0
$LN25@tri:
	movaps	xmm1, xmm6
	movaps	xmm0, xmm10
	mulss	xmm1, DWORD PTR fex0$1$[rsp]
	mulss	xmm0, DWORD PTR fez0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm14, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm12
	ja	$LN39@tri

; 170  : 			AXISTEST_Z12(e0.y, e0.x, fey0, fex0);

	movss	xmm1, DWORD PTR e0$$sroa$1295$1$[rsp]
	movaps	xmm0, xmm15
	mulss	xmm0, xmm1
	movaps	xmm14, xmm3
	mulss	xmm1, DWORD PTR v2$$sroa$1294$1$[rsp]
	movaps	xmm12, xmm4
	mulss	xmm14, DWORD PTR e0$$sroa$1282$1$[rsp]
	mulss	xmm12, DWORD PTR e0$$sroa$1282$1$[rsp]
	subss	xmm14, xmm0
	subss	xmm12, xmm1
	comiss	xmm14, xmm12
	jbe	SHORT $LN28@tri
	movaps	xmm0, xmm12
	movaps	xmm12, xmm14
	movaps	xmm14, xmm0
$LN28@tri:
	movaps	xmm1, xmm2
	movaps	xmm0, xmm10
	mulss	xmm1, DWORD PTR fex0$1$[rsp]
	mulss	xmm0, DWORD PTR fey0$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm14, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm12
	ja	$LN39@tri
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm14, DWORD PTR e1$$sroa$1283$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm0, xmm5
	mulss	xmm0, xmm14
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm1, xmm14
	andps	xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	movss	DWORD PTR fey1$1$[rsp], xmm1
	movss	xmm1, DWORD PTR e1$$sroa$1303$1$[rsp]
	movaps	xmm12, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm14, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm12, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	mulss	xmm14, DWORD PTR v2$$sroa$1294$1$[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	DWORD PTR fez1$1$[rsp], xmm12
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 174  : 			AXISTEST_X01(e1.z, e1.y, fez1, fey1);

	movaps	xmm12, xmm9
	mulss	xmm12, xmm1
	subss	xmm12, xmm0
	movaps	xmm0, xmm8
	mulss	xmm0, DWORD PTR e1$$sroa$1283$1$[rsp]
	subss	xmm14, xmm0
	comiss	xmm12, xmm14
	jbe	SHORT $LN31@tri
	movaps	xmm0, xmm14
	movaps	xmm14, xmm12
	movaps	xmm12, xmm0
$LN31@tri:
	movaps	xmm1, xmm6
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR fey1$1$[rsp]
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm12, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm14
	ja	$LN39@tri
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm1, DWORD PTR e1$$sroa$1285$1$[rsp]
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movaps	xmm12, xmm5
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	xmm14, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	movaps	xmm0, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	mulss	xmm8, DWORD PTR e1$$sroa$1285$1$[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm0, xmm14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	mulss	xmm12, xmm1
	movss	xmm1, DWORD PTR e1$$sroa$1303$1$[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	DWORD PTR fex1$1$[rsp], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 176  : 			AXISTEST_Y02(e1.z, e1.x, fez1, fex1);

	movaps	xmm0, xmm13
	mulss	xmm0, xmm1
	mulss	xmm1, xmm4
	subss	xmm12, xmm0
	subss	xmm8, xmm1
	comiss	xmm12, xmm8
	jbe	SHORT $LN34@tri
	movaps	xmm0, xmm8
	movaps	xmm8, xmm12
	movaps	xmm12, xmm0
$LN34@tri:
	movaps	xmm1, xmm6
	movaps	xmm0, xmm10
	mulss	xmm1, DWORD PTR fex1$1$[rsp]
	mulss	xmm0, DWORD PTR fez1$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm12, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm8
	ja	$LN39@tri

; 177  : 			AXISTEST_Z0(e1.y, e1.x, fey1, fex1);

	movaps	xmm0, xmm9
	movaps	xmm12, xmm13
	mulss	xmm0, DWORD PTR e1$$sroa$1285$1$[rsp]
	movaps	xmm8, xmm3
	mulss	xmm12, DWORD PTR e1$$sroa$1283$1$[rsp]
	mulss	xmm8, DWORD PTR e1$$sroa$1283$1$[rsp]
	subss	xmm12, xmm0
	movaps	xmm0, xmm15
	mulss	xmm0, DWORD PTR e1$$sroa$1285$1$[rsp]
	subss	xmm8, xmm0
	comiss	xmm12, xmm8
	jbe	SHORT $LN37@tri
	movaps	xmm0, xmm8
	movaps	xmm8, xmm12
	movaps	xmm12, xmm0
$LN37@tri:
	movaps	xmm1, xmm2
	movaps	xmm0, xmm10
	mulss	xmm1, DWORD PTR fex1$1$[rsp]
	mulss	xmm0, DWORD PTR fey1$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm12, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm8
	ja	$LN39@tri
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	xmm0, DWORD PTR [rcx+80]
	subss	xmm0, DWORD PTR [rcx+104]
	movss	xmm1, DWORD PTR [rcx+76]
	subss	xmm1, DWORD PTR [rcx+100]
	movss	xmm12, DWORD PTR [rcx+72]
	subss	xmm12, DWORD PTR [rcx+96]
	movss	DWORD PTR tv2487[rsp], xmm0
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 181  : 			const float fez2 = _abs(e2.z);

	mulss	xmm9, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm8, xmm1
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\OPC_Point.h

; 375  : 		inline_	Point			operator-(const Point& p)			const		{ return Point(x - p.x, y - p.y, z - p.z);			}

	movss	DWORD PTR tv2488[rsp], xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm8, xmm14
	movss	DWORD PTR fey2$1$[rsp], xmm8
	movaps	xmm8, xmm0
	andps	xmm8, xmm14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm0, xmm5
	mulss	xmm0, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movss	DWORD PTR fez2$1$[rsp], xmm8
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 182  : 			AXISTEST_X2(e2.z, e2.y, fez2, fey2);

	movaps	xmm8, xmm15
	mulss	xmm8, DWORD PTR tv2487[rsp]
	subss	xmm9, xmm0
	movaps	xmm0, xmm11
	mulss	xmm0, xmm1
	subss	xmm8, xmm0
	comiss	xmm9, xmm8
	jbe	SHORT $LN40@tri
	movaps	xmm0, xmm8
	movaps	xmm8, xmm9
	movaps	xmm9, xmm0
$LN40@tri:
	movaps	xmm1, xmm2
	movaps	xmm0, xmm6
	mulss	xmm1, DWORD PTR fez2$1$[rsp]
	mulss	xmm0, DWORD PTR fey2$1$[rsp]
	addss	xmm1, xmm0
	comiss	xmm9, xmm1
	ja	$LN39@tri
	xorps	xmm1, xmm7
	comiss	xmm1, xmm8
	ja	$LN39@tri

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	mulss	xmm13, DWORD PTR tv2487[rsp]
	movaps	xmm0, xmm3
	mulss	xmm0, DWORD PTR tv2487[rsp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	movaps	xmm8, xmm12
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 183  : 			const float fex2 = _abs(e2.x);

	mulss	xmm5, xmm12
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.16299.0\ucrt\corecrt_math.h

; 671  :             return (float)fabs(_X);

	andps	xmm8, xmm14
; File C:\GitHub\Engine_Call_of_Chernobyl_x64\src\xrCDB\xrCDB_box.cpp

; 184  : 			AXISTEST_Y1(e2.z, e2.x, fez2, fex2);

	mulss	xmm11, xmm12
	subss	xmm5, xmm13
	subss	xmm11, xmm0
	comiss	xmm5, xmm11
	jbe	SHORT $LN43@tri
	movaps	xmm0, xmm11
	movaps	xmm11, xmm5
	movaps	xmm5, xmm0
$LN43@tri:
	movaps	xmm0, xmm10
	mulss	xmm6, xmm8
	mulss	xmm0, DWORD PTR fez2$1$[rsp]
	addss	xmm6, xmm0
	comiss	xmm5, xmm6
	ja	$LN39@tri
	xorps	xmm6, xmm7
	comiss	xmm6, xmm11
	ja	$LN39@tri

; 185  : 			AXISTEST_Z12(e2.y, e2.x, fey2, fex2);

	movss	xmm0, DWORD PTR v2$$sroa$1294$1$[rsp]
	mulss	xmm3, DWORD PTR tv2488[rsp]
	mulss	xmm4, DWORD PTR tv2488[rsp]
	mulss	xmm0, xmm12
	mulss	xmm15, xmm12
	subss	xmm4, xmm0
	subss	xmm3, xmm15
	comiss	xmm3, xmm4
	jbe	SHORT $LN46@tri
	movaps	xmm0, xmm4
	movaps	xmm4, xmm3
	movaps	xmm3, xmm0
$LN46@tri:
	mulss	xmm10, DWORD PTR fey2$1$[rsp]
	mulss	xmm2, xmm8
	addss	xmm2, xmm10
	comiss	xmm3, xmm2
	ja	SHORT $LN39@tri
	xorps	xmm2, xmm7
	comiss	xmm2, xmm4
	ja	SHORT $LN39@tri

; 186  : 		}
; 187  : 		return true;

	mov	al, 1
$LN145@tri:
	movaps	xmm12, XMMWORD PTR [rsp+96]
$LN62@tri:

; 188  : 	}

	movaps	xmm13, XMMWORD PTR [rsp+80]
	lea	r11, QWORD PTR [rsp+216]
	movaps	xmm6, XMMWORD PTR [r11-24]
	movaps	xmm7, XMMWORD PTR [r11-40]
	movaps	xmm8, XMMWORD PTR [r11-56]
	movaps	xmm9, XMMWORD PTR [r11-72]
	movaps	xmm10, XMMWORD PTR [r11-88]
	movaps	xmm11, XMMWORD PTR [r11-104]
	movaps	xmm14, XMMWORD PTR [rsp+64]
	movaps	xmm15, XMMWORD PTR [rsp+48]
	mov	rsp, r11
	ret	0
$LN39@tri:

; 186  : 		}
; 187  : 		return true;

	xor	al, al
	jmp	SHORT $LN145@tri
$LN19@tri:
	xor	al, al
	jmp	SHORT $LN62@tri
?_tri@?$box_collider@$00$00@@QEAA_NXZ ENDP		; box_collider<1,1>::_tri
_TEXT	ENDS
END
